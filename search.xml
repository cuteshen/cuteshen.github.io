<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[express-渲染模版页面]]></title>
      <url>http://yoursite.com/2016/09/12/express-%E6%B8%B2%E6%9F%93%E6%A8%A1%E7%89%88%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h2 id="模块consolidate（需下载）"><a href="#模块consolidate（需下载）" class="headerlink" title="模块consolidate（需下载）"></a>模块consolidate（需下载）</h2><p>需要在应用中进行如下设置才能让 Express 渲染模板文件：</p>
<p>views, 放模板文件的目录，比如： app.set(‘views’, ‘./views’)</p>
<p>view engine, 模板引擎，比如： app.set(‘view engine’, ‘ejs’)</p>
<p>使用:</p>
<pre><code>const consolidate=require(&apos;consolidate&apos;);
</code></pre><p>配置:</p>
<pre><code>server.set(&apos;views&apos;,&apos;template&apos;); //设置模板目录
server.set(&apos;view engine&apos;,&apos;html&apos;); //设置模板名称也可设置为ejs,jade...
server.engine(&apos;html&apos;,consolidate.ejs); //对应模板引擎
</code></pre><p>渲染：</p>
<pre><code>res.render(模板地址,数据);
</code></pre><p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const express=require(&apos;express&apos;);</div><div class="line">const ejs=require(&apos;ejs&apos;);</div><div class="line">const consolidate=require(&apos;consolidate&apos;);</div><div class="line"></div><div class="line">var server=express();</div><div class="line"></div><div class="line">server.listen(8081);</div><div class="line"></div><div class="line">server.set(&apos;views&apos;,&apos;template&apos;); //设置模板目录</div><div class="line">server.set(&apos;view engine&apos;,&apos;html&apos;); //设置模板名称</div><div class="line"></div><div class="line">server.engine(&apos;html&apos;,consolidate.ejs); //对应上模板引擎</div><div class="line"></div><div class="line">server.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">    res.render(&apos;index&apos;,&#123;msg:&apos;welcome welcome&apos;&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(&apos;/news&apos;,function(req,res)&#123;</div><div class="line">    res.render(&apos;news&apos;,&#123;msg:&apos;news&apos;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>template目录下模版文件</p>
<p>index.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h3&gt;</div><div class="line">        &lt;%=msg%&gt;</div><div class="line">        &lt;!--welcome welcome--&gt;</div><div class="line">    &lt;/h3&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>news.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h3&gt;</div><div class="line">        &lt;%=msg%&gt;</div><div class="line">        &lt;!--news--&gt;</div><div class="line">    &lt;/h3&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[node-express的cookie，session，fs文件操作]]></title>
      <url>http://yoursite.com/2016/09/12/node-express%E7%9A%84cookie%EF%BC%8Csession%EF%BC%8Cfs%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="cookie数据"><a href="#cookie数据" class="headerlink" title="cookie数据"></a>cookie数据</h2><blockquote>
<p>解析客户端cookie数据</p>
</blockquote>
<p>node原始方法：</p>
<pre><code>req.headers[&apos;cookie&apos;]
//a=1; b=2; c=3
</code></pre><p>express方法：</p>
<p>1，引入模块cookie-parser(需下载)</p>
<pre><code>const cookieParser=require(&apos;cookie-parser&apos;);
</code></pre><p>2，调用</p>
<pre><code>app.use(cookieParser());
</code></pre><p>3,写入cookie</p>
<pre><code>res.setHeader(&apos;set-cookie&apos;,&apos;a=1&apos;)  //原生node
res.cookie(name,value)  //express

设置过期时间:

res.setHeader(&apos;set-cookie&apos;,&apos;a=1;expires=oDate&apos;) //原生node

res.cookie(name,value,options)  //express

    ----option:{maxAge:毫秒，path:&apos;/&apos;}
</code></pre><p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.use(cookieParser());</div><div class="line"></div><div class="line">app.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">    res.cookie(&apos;bb&apos;,&apos;123&apos;,&#123;maxAge:2000&#125;);</div><div class="line">    res.send(req.cookies);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="session数据"><a href="#session数据" class="headerlink" title="session数据"></a>session数据</h2><p>1，引入模块cookie-session(需下载)</p>
<pre><code>const cookieSession=require(&apos;cookie-session&apos;);
</code></pre><p>2，调用：</p>
<pre><code>app.use(cookieSession({
    name:&apos;zns_sessid&apos;,    //session名称
    keys:[&apos;aaa&apos;,&apos;bbb&apos;,&apos;cccc&apos;],  //循环签名session
    maxAge:20*60*1000    //过期时间
}));

app.get(&apos;/&apos;,function(req,res){
    if(req.session.visite){
        req.session.visite++;
    }else{
        req.session.visite=1;
    }
    res.send(&apos;到访了&apos;+req.session.visite+&apos;次&apos;);
});
</code></pre><p>也可以通过<code>express-session</code>模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">const express=require(&apos;express&apos;);</div><div class="line">const expressSession=require(&apos;express-session&apos;);</div><div class="line"></div><div class="line">var app=express(); //创建一个服务器</div><div class="line"></div><div class="line">app.listen(8081);</div><div class="line"></div><div class="line">//调用</div><div class="line">app.use(expressSession(&#123;</div><div class="line">    secret: &apos;abc&apos;,  //加密，名字</div><div class="line">    resave: false,  //如果你有更好session存储的地方,否则在false</div><div class="line">    saveUninitialized: true,  //初始化存储</div><div class="line">    cookie: &#123; maxAge: 20*60*1000&#125;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">    if(req.session.visite)&#123;</div><div class="line">        req.session.visite++;</div><div class="line">    &#125;else&#123;</div><div class="line">        req.session.visite=1;</div><div class="line">    &#125;</div><div class="line">    res.send(&apos;到访了&apos;+req.session.visite+&apos;次&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="读取文件-fs-readFile"><a href="#读取文件-fs-readFile" class="headerlink" title="读取文件 fs.readFile"></a>读取文件 fs.readFile</h2><p>设置header</p>
<pre><code>res.setHeader(&apos;content-type&apos;,&apos;text/html&apos;); //node原生方法

res.set(&apos;content-type&apos;,&apos;text/html&apos;);    //express提供
</code></pre><p>设置状态码：</p>
<pre><code>res.status(404)
或
res.statusCode=404;
</code></pre><p>也可以这样写</p>
<pre><code>res.status(404).send(data)
</code></pre><p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const express=require(&apos;express&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">var app=express(); //创建一个服务器</div><div class="line"></div><div class="line">app.listen(8081);</div><div class="line"></div><div class="line"></div><div class="line">app.get(&apos;/form.html&apos;,function(req,res)&#123;</div><div class="line">    //res.setHeader(&apos;content-type&apos;,&apos;text/html&apos;); //原生</div><div class="line">    res.set(&apos;content-type&apos;,&apos;text/html&apos;); //express提供设置头部  set</div><div class="line"></div><div class="line">    fs.readFile(&apos;form.html&apos;,function(err,data)&#123;</div><div class="line">        if(err)&#123;</div><div class="line">            //res.writeHeader(404,null); //原生</div><div class="line">            res.status(404);</div><div class="line">            res.send(&apos;404&apos;);</div><div class="line">        &#125;else&#123;</div><div class="line">            res.send(data);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="替换readFile"><a href="#替换readFile" class="headerlink" title="替换readFile"></a>替换readFile</h2><p>读取文件在express中可直接通过res.sendFile(path)，其中path路径必须是绝对的：</p>
<pre><code>res.sendFile(__dirname+&apos;/download.html&apos;);

或

res.sendFile(&apos;download.html&apos;,{root:__dirname});
</code></pre><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>如果原生node方式需要设置header才可以下载文件</p>
<pre><code>res.setHeader(&apos;content-disposition&apos;,&apos;attachment;filename=xxxx&apos;);
</code></pre><p>通过express可直接用res.download()，无需任何设置</p>
<pre><code>res.download(filename,newName)
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[node-express数据解析实例]]></title>
      <url>http://yoursite.com/2016/09/12/node-express%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h2 id="express-安装"><a href="#express-安装" class="headerlink" title="express 安装"></a>express 安装</h2><ol>
<li>npm install express</li>
<li>const express=require(‘express’);</li>
</ol>
<h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><pre><code>const express=require(&apos;express&apos;);

var app=express(); //创建一个服务器

app.listen(8081);
</code></pre><h3 id="get请求方法"><a href="#get请求方法" class="headerlink" title="get请求方法"></a>get请求方法</h3><blockquote>
<p>app.get(地址,fnCb)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.get(‘/’,function(req,res)&#123;</div><div class="line">	res.send(string/json/array....)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在express中res.send()代替了原生node的res.write(),res.end()，</p>
<p>因此可统一使用res.send();</p>
<h4 id="获取get数据"><a href="#获取get数据" class="headerlink" title="获取get数据"></a>获取get数据</h4><p>假设我的url请求是：localhost:8081/user?username=admin&amp;password=admin</p>
<p>通过req.query获取的数据为<code>{ username: &#39;admin&#39;, password: &#39;admin&#39; }</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.get(‘/user’,function(req,res)&#123;</div><div class="line">    console.log(req.query);</div><div class="line">    //&#123; username: &apos;admin&apos;, password: &apos;admin&apos; &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="post请求方法"><a href="#post请求方法" class="headerlink" title="post请求方法"></a>post请求方法</h3><p>若用node原始获取post数据方式是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app.use(&apos;/user&apos;, function (req, res) &#123;</div><div class="line">    var str=&apos;&apos;;</div><div class="line">    req.on(&apos;data&apos;,function(s)&#123;</div><div class="line">        str+=s;</div><div class="line">    &#125;);</div><div class="line">    req.on(&apos;end&apos;,function()&#123;</div><div class="line">        req.post=querystring.parse(str);</div><div class="line">        res.send(req.post);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="通过body-parser获取post数据"><a href="#通过body-parser获取post数据" class="headerlink" title="通过body-parser获取post数据"></a>通过body-parser获取post数据</h4><p>安装模块</p>
<pre><code>const bodyParser=require(&apos;body-parser&apos;);
</code></pre><p>调用中间件</p>
<pre><code>app.use(bodyParser.urlencoded({extended:false}))
</code></pre><p><code>extended:false</code></p>
<p>通过body-parser返回的对象是一个键值对，当extended为false的时候，键值对中的值就为’String’或’Array’形式，为true的时候，则可为任何数据类型。</p>
<p><code>limit</code></p>
<p>post数据大小限制，默认100</p>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.use(&apos;/user&apos;, function (req, res) &#123;</div><div class="line">    res.send(req.body);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="form属性为enctype-”multipart-form-data”的post表单处理"><a href="#form属性为enctype-”multipart-form-data”的post表单处理" class="headerlink" title="form属性为enctype=”multipart/form-data”的post表单处理"></a>form属性为enctype=”multipart/form-data”的post表单处理</h5><p>通过第三方模块 multer</p>
<pre><code>const multerLib=require(&apos;multer&apos;);
</code></pre><p>使用：</p>
<pre><code>const multerLib=require(&apos;multer&apos;);
var multer=multerLib({dest:&apos;upload&apos;});
app.use(multer.any());
</code></pre><p>获取方式：</p>
<pre><code>req.files
</code></pre><p>req.files：</p>
<pre><code>fieldname    字段名称

originalname    源文件名称

mimetype    文件类型

path        文件路径
</code></pre><p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const express=require(&apos;express&apos;);</div><div class="line">const bodyParser=require(&apos;body-parser&apos;);</div><div class="line">const multerLib=require(&apos;multer&apos;);</div><div class="line"></div><div class="line">var app=express();</div><div class="line">var multer=multerLib(&#123;dest:&apos;upload&apos;&#125;);</div><div class="line"></div><div class="line">app.listen(8081);</div><div class="line"></div><div class="line">app.use(bodyParser.urlencoded(&#123;extended:false&#125;))</div><div class="line"></div><div class="line">app.use(&apos;/user&apos;, function (req, res) &#123;</div><div class="line">    console.log(req.body);</div><div class="line">    console.log(req.files);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>html:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;http://localhost:8081/user&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">    user:</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    pass:</div><div class="line">    &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;input type=&quot;file&quot; name=&quot;pic&quot;/&gt;</div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h2 id="app-get-app-post通用方法"><a href="#app-get-app-post通用方法" class="headerlink" title="app.get,app.post通用方法"></a>app.get,app.post通用方法</h2><pre><code>app.use(地址,fnCb);
</code></pre><p>无论get,post都会执行</p>
<p>如果同时有，get和use，会按顺序执行</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><h3 id="获取get数据方式"><a href="#获取get数据方式" class="headerlink" title="获取get数据方式:"></a>获取get数据方式:</h3><p>直接req.query</p>
<h3 id="获取post数据方式"><a href="#获取post数据方式" class="headerlink" title="获取post数据方式:"></a>获取post数据方式:</h3><p>(application/x-www-form-urlencoded)–通过body-parser模块–req.body</p>
<p>(multipart/form-data)–通过multer模块</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[构建工具——webpack]]></title>
      <url>http://yoursite.com/2016/09/10/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94webpack/</url>
      <content type="html"><![CDATA[<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure>
<p>当然如果常规项目还是把依赖写入 package.json 包去更人性化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line"></div><div class="line">npm install webpack --save-dev</div></pre></td></tr></table></figure>
<h2 id="添加第三方模块"><a href="#添加第三方模块" class="headerlink" title="添加第三方模块"></a>添加第三方模块</h2><p>package.json:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">  &quot;autoprefixer-loader&quot;: &quot;^3.2.0&quot;,</div><div class="line">  &quot;babel-core&quot;: &quot;^6.14.0&quot;,</div><div class="line">  &quot;babel-loader&quot;: &quot;^6.2.5&quot;,</div><div class="line">  &quot;babel-plugin-transform-runtime&quot;: &quot;^6.15.0&quot;,</div><div class="line">  &quot;babel-preset-es2015&quot;: &quot;^6.14.0&quot;,</div><div class="line">  &quot;babel-runtime&quot;: &quot;^6.11.6&quot;,</div><div class="line">  &quot;css-loader&quot;: &quot;^0.25.0&quot;,</div><div class="line">  &quot;file-loader&quot;: &quot;^0.9.0&quot;,</div><div class="line">  &quot;html-loader&quot;: &quot;^0.4.3&quot;,</div><div class="line">  &quot;node-sass&quot;: &quot;^3.9.3&quot;,</div><div class="line">  &quot;sass-loader&quot;: &quot;^4.0.2&quot;,</div><div class="line">  &quot;style-loader&quot;: &quot;^0.13.1&quot;,</div><div class="line">  &quot;url-loader&quot;: &quot;^0.5.7&quot;,</div><div class="line">  &quot;vue-hot-reload-api&quot;: &quot;^1.3.3&quot;,</div><div class="line">  &quot;vue-html-loader&quot;: &quot;^1.2.3&quot;,</div><div class="line">  &quot;vue-loader&quot;: &quot;^8.5.2&quot;,</div><div class="line">  &quot;vue-router&quot;: &quot;^0.7.13&quot;,</div><div class="line">  &quot;vue-style-loader&quot;: &quot;^1.0.0&quot;,</div><div class="line">  &quot;webpack&quot;: &quot;^1.13.2&quot;,</div><div class="line">  &quot;webpack-dev-server&quot;: &quot;^1.15.1&quot;</div><div class="line">&#125;,</div><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">  &quot;vue&quot;: &quot;^1.0.26&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/img/webpack.png" alt="img"></p>
<h2 id="编写webpack-config-js"><a href="#编写webpack-config-js" class="headerlink" title="编写webpack.config.js"></a>编写webpack.config.js</h2><p>每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js 一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">var Webpack = require(&quot;webpack&quot;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    //入口文件配置也可以是数组</div><div class="line">    entry: &apos;./src/main.js&apos;,</div><div class="line">    //输出项配置</div><div class="line">    output: &#123;</div><div class="line">            path: path.join(__dirname, &apos;./dist&apos;),</div><div class="line">            // 文件地址，使用绝对路径形式</div><div class="line">            filename: &apos;[name].js&apos;,</div><div class="line">            //[name]这里是webpack提供的根据路口文件自动生成的名字</div><div class="line">            publicPath: &apos;/dist/&apos;</div><div class="line">            // 公共文件生成的地址</div><div class="line">        &#125;,</div><div class="line">    // 服务器配置相关，自动刷新!</div><div class="line">    devServer: &#123;</div><div class="line">        historyApiFallback: true,</div><div class="line">        hot: false,</div><div class="line">        inline: true,</div><div class="line">        grogress: true,</div><div class="line">    &#125;,</div><div class="line">    //加载器配置,告知 webpack 每一种文件都需要使用什么加载器来处理：</div><div class="line">    module: &#123;</div><div class="line">        loaders: [</div><div class="line">            // 解析.vue文件</div><div class="line">            &#123; test: /\.vue$/, loader: &apos;vue&apos; &#125;,</div><div class="line">            // 转化ES6的语法</div><div class="line">            &#123; test: /\.js$/, loader: &apos;babel&apos;, exclude: /node_modules/ &#125;,</div><div class="line">            // 编译css并自动添加css前缀</div><div class="line">            &#123; test: /\.css$/, loader: &apos;style!css!autoprefixer&apos;&#125;,</div><div class="line">            //.scss 文件想要编译，scss就需要这些东西！来编译处理</div><div class="line">            //install css-loader style-loader sass-loader node-sass --save-dev</div><div class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</div><div class="line">            //limit小于16k的图片转换成base64格式</div><div class="line">            &#123; test: /\.(png|jpg|gif)$/, loader: &apos;url-loader?limit=16000&apos;&#125;,</div><div class="line">            //html模板编译？</div><div class="line">            &#123; test: /\.(html|tpl)$/, loader: &apos;html-loader&apos; &#125;,</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    // .vue的配置。需要单独出来配置，其实没什么必要--因为我删了也没保错，不过这里就留这把，因为官网文档里是可以有单独的配置的。</div><div class="line">    vue: &#123;</div><div class="line">        loaders: &#123;</div><div class="line">            css: &apos;style!css!autoprefixer&apos;,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    resolve: &#123;</div><div class="line">        // require时省略的扩展名，如：require(&apos;module&apos;) 不需要module.js</div><div class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.vue&apos;],</div><div class="line">        // 别名，可以直接使用别名来代表设定的路径以及其他</div><div class="line">        alias: &#123;</div><div class="line">            filter: path.join(__dirname, &apos;./src/filters&apos;),</div><div class="line">            components: path.join(__dirname, &apos;./src/components&apos;)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //插件配置</div><div class="line">    plugins: [</div><div class="line">        new Webpack.BannerPlugin(&quot;这里是打包文件头部注释！&quot;)//注意这是一个数组..</div><div class="line">    ],</div><div class="line">    //采用source-map的形式直接显示你出错代码的位置</div><div class="line">    devtool: &apos;eval-source-map&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="新建html"><a href="#新建html" class="headerlink" title="新建html"></a>新建html</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!--引入webpack编译后的输出文件main.js--&gt;</div><div class="line">&lt;script src=&quot;dist/main.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h2 id="package-json配置命令"><a href="#package-json配置命令" class="headerlink" title="package.json配置命令"></a>package.json配置命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;webpack-dev-server --inline&quot;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>执行webpack执行构建</p>
<p>webpack –config XXX.js   //通过文件名执行（比如webpack.config2.js）来打包</p>
<p>webpack –watch   //监听变动并自动打包</p>
<p>webpack -p    //压缩混淆脚本，这个非常非常重要！</p>
<p>webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了</p>
<h4 id="也可以通过执行npm-run-start执行构建并监听"><a href="#也可以通过执行npm-run-start执行构建并监听" class="headerlink" title="也可以通过执行npm run start执行构建并监听"></a>也可以通过执行npm run start执行构建并监听</h4><p>另外webpack-dev-server监听需要访问localhost:8080/webpack-dev-server浏览器才会自动刷新</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs——数据库操作，登录，注册]]></title>
      <url>http://yoursite.com/2016/09/03/NodeJs%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%EF%BC%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E6%B3%A8%E5%86%8C/</url>
      <content type="html"><![CDATA[<h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var db=mysql.createConnection(&#123;</div><div class="line">    host:       &apos;localhost&apos;,</div><div class="line">    user:       &apos;root&apos;,</div><div class="line">    password:   &apos;xxxx&apos;,</div><div class="line">    database:   &apos;数据库名称&apos;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">db.query(sql,function(err,data)&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="MD5加密模块"><a href="#MD5加密模块" class="headerlink" title="MD5加密模块"></a>MD5加密模块</h2><h3 id="为了方便使用，提前写成node模块"><a href="#为了方便使用，提前写成node模块" class="headerlink" title="为了方便使用，提前写成node模块:"></a>为了方便使用，提前写成node模块:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//引入node加密模块crypto</div><div class="line">const crypto=require(&apos;crypto&apos;);</div><div class="line">//定义加密方法</div><div class="line">function md5(str)&#123;</div><div class="line">    //设置为md5加密</div><div class="line">    var obj=crypto.createHash(&apos;md5&apos;);</div><div class="line">    //带入参数</div><div class="line">    obj.update(str);</div><div class="line">    //以16进制进行加密</div><div class="line">    return obj.digest(&apos;hex&apos;);</div><div class="line">&#125;</div><div class="line">//暴露出去</div><div class="line">exports.md5=md5;</div></pre></td></tr></table></figure>
<h3 id="调用方式："><a href="#调用方式：" class="headerlink" title="调用方式："></a>调用方式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const md5=require(&apos;./md5&apos;).md5;</div><div class="line"></div><div class="line">console.log(md5(&apos;1234567&apos;));</div></pre></td></tr></table></figure>
<h2 id="前端代码-angular-http方法"><a href="#前端代码-angular-http方法" class="headerlink" title="前端代码-angular $http方法"></a>前端代码-angular $http方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;js/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        var app=angular.module(&apos;app&apos;,[]);</div><div class="line">        app.controller(&apos;login-register&apos;, function ($scope, $http) &#123;</div><div class="line">            $scope.reg= function () &#123;</div><div class="line">                console.log(&apos;1&apos;)</div><div class="line">                $http.get(&apos;user&apos;,&#123;</div><div class="line">                    params:&#123;act:&apos;add&apos;,username:$scope.username,password:$scope.password&#125;</div><div class="line">                &#125;).success(function (res) &#123;</div><div class="line">                    console.log(2);</div><div class="line">                    alert(JSON.stringify(res));</div><div class="line">                &#125;).error(function(err)&#123;</div><div class="line">                    console.log(err);</div><div class="line">                &#125;)</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            $scope.login= function () &#123;</div><div class="line">                $http.get(&apos;user&apos;,&#123;</div><div class="line">                    params:&#123;act:&apos;login&apos;,username:$scope.username,password:$scope.password&#125;</div><div class="line">                &#125;).success(function (res) &#123;</div><div class="line">                    alert(JSON.stringify(res.msg));</div><div class="line">                &#125;).error(function(err)&#123;</div><div class="line">                    console.log(err);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body ng-app=&quot;app&quot;&gt;</div><div class="line">&lt;div ng-controller=&quot;login-register&quot;&gt;</div><div class="line">    user:</div><div class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;username&quot;&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    pass:</div><div class="line">    &lt;input type=&quot;password&quot; ng-model=&quot;password&quot;&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;注册&quot; ng-click=&quot;reg()&quot;&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;登录&quot; ng-click=&quot;login()&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="主要业务实现"><a href="#主要业务实现" class="headerlink" title="主要业务实现"></a>主要业务实现</h2><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;/user&apos;, function (req, res) &#123;</div><div class="line">    //链接数据库</div><div class="line">    var db=mysql.createConnection(&#123;</div><div class="line">        host:       &apos;localhost&apos;,</div><div class="line">        user:       &apos;root&apos;,</div><div class="line">        password:   &apos;root&apos;,</div><div class="line">        database:   &apos;user&apos;</div><div class="line">    &#125;)</div><div class="line">    //处理具体业务</div><div class="line">    var act=req.get.act;</div><div class="line">    console.log(req.get.act);</div><div class="line">    switch (act)&#123;</div><div class="line">        case &apos;add&apos;:</div><div class="line">            //注册</div><div class="line">            E.emit(&apos;add-user&apos;,req,res,db);</div><div class="line">            break;</div><div class="line">        case &apos;login&apos;:</div><div class="line">            //登录</div><div class="line">            E.emit(&apos;login-user&apos;,req,res,db);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="注册方法"><a href="#注册方法" class="headerlink" title="注册方法"></a>注册方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;add-user&apos;, function (req, res, db) &#123;</div><div class="line">    var username=req.get.username;</div><div class="line">    var password=req.get.password;</div><div class="line"></div><div class="line">    var sql=`SELECT username FROM users WHERE username=&quot;$&#123;username&#125;&quot;`;</div><div class="line">    db.query(sql, function (err, data) &#123;</div><div class="line">        if(err)&#123;</div><div class="line">            res.end(JSON.stringify(&#123;err:1,msg:&quot;数据库出问题&quot;&#125;));</div><div class="line">        &#125;else&#123;</div><div class="line">            if(data.length)&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1,msg:&quot;此用户名已存在&quot;&#125;));</div><div class="line">            &#125;else&#123;</div><div class="line">                var I_SQL=`INSERT INTO users VALUES(null,&quot;$&#123;username&#125;&quot;,&quot;$&#123;md5(md5(password))&#125;&quot;)`;</div><div class="line">                db.query(I_SQL, function (err, data) &#123;</div><div class="line">                    if(err)&#123;</div><div class="line">                        res.end(JSON.stringify(&#123;err:1,msg:&quot;数据库方面的问题&quot;&#125;));</div><div class="line">                    &#125;else&#123;</div><div class="line">                        res.end(JSON.stringify(&#123;err:0,msg:&quot;注册成功&quot;&#125;));</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="登录方法"><a href="#登录方法" class="headerlink" title="登录方法"></a>登录方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;login-user&apos;, function (req, res, db) &#123;</div><div class="line">    var username=req.get.username;</div><div class="line">    var password=req.get.password;</div><div class="line"></div><div class="line">    var SQL=`SELECT * From users WHERE username=&quot;$&#123;username&#125;&quot;`;</div><div class="line">    db.query(SQL, function (err, data) &#123;</div><div class="line">        if(err)&#123;</div><div class="line">            res.end(JSON.stringify(&#123;err:1,msg:&quot;数据库方面的问题&quot;&#125;));</div><div class="line">        &#125;else&#123;</div><div class="line">            if(data.length)&#123;</div><div class="line">                if(data[0].password == md5(md5(password)))&#123;</div><div class="line">                    res.end(JSON.stringify(&#123;err:0,msg:&quot;登录成功&quot;&#125;));</div><div class="line">                &#125;else&#123;</div><div class="line">                    res.end(JSON.stringify(&#123;err:1,msg:&quot;密码错误&quot;&#125;));</div><div class="line">                &#125;</div><div class="line">            &#125;else&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1,msg:&quot;此用户不存在&quot;&#125;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>完整项目地址：原来github还按项目收费，好吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">const fs = require(&apos;fs&apos;);</div><div class="line">const os = require(&apos;os&apos;);</div><div class="line">const cluster = require(&apos;cluster&apos;);</div><div class="line">const EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line">const mysql=require(&apos;mysql&apos;)</div><div class="line">const urlLib=require(&apos;url&apos;);</div><div class="line">var cpus=os.cpus().length;</div><div class="line"></div><div class="line">if(cluster.isMaster)&#123;</div><div class="line">    for(var i=1; i&lt;cpus; i++)&#123;</div><div class="line">        cluster.fork();</div><div class="line">    &#125;</div><div class="line">    cluster.on(&apos;exit&apos;, function (worker, code, signal) &#123;</div><div class="line">        cluster.fork();</div><div class="line">    &#125;)</div><div class="line">&#125;else&#123;</div><div class="line">    var E=new EventEmitter();</div><div class="line"></div><div class="line">    http.createServer(function (req, res) &#123;</div><div class="line">        E.emit(&apos;get-parse&apos;,req,res);</div><div class="line">    &#125;).listen(8080);</div><div class="line">    E.on(&apos;get-parse&apos;, function (req, res) &#123;</div><div class="line">        req.get=urlLib.parse(req.url,true).query;</div><div class="line">        req.url=urlLib.parse(req.url,true).pathname;</div><div class="line"></div><div class="line">        E.emit(&apos;buss-do&apos;,req,res);</div><div class="line">    &#125;)</div><div class="line">    E.on(&apos;buss-do&apos;, function (req, res) &#123;</div><div class="line">        var bool=E.emit(req.url,req,res);</div><div class="line">        if(bool == false)&#123;</div><div class="line">            E.emit(&apos;read-file&apos;,req,res);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    E.on(&apos;read-file&apos;, function (req, res) &#123;</div><div class="line"></div><div class="line">        var rs=fs.createReadStream(&apos;www&apos;+req.url);</div><div class="line">        rs.pipe(res);</div><div class="line">        rs.on(&apos;error&apos;, function () &#123;</div><div class="line">            res.writeHeader(404);</div><div class="line">            res.write(&apos;404&apos;);</div><div class="line">            res.end();</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">    //以下处理接口</div><div class="line">    E.on(&apos;/user&apos;, function (req, res) &#123;</div><div class="line">        //链接数据库</div><div class="line">        var db=mysql.createConnection(&#123;</div><div class="line">            host:       &apos;localhost&apos;,</div><div class="line">            user:       &apos;root&apos;,</div><div class="line">            password:   &apos;root&apos;,</div><div class="line">            database:   &apos;user&apos;</div><div class="line">        &#125;)</div><div class="line">        //处理具体业务</div><div class="line">        var act=req.get.act;</div><div class="line">        console.log(req.get.act);</div><div class="line">        switch (act)&#123;</div><div class="line">            case &apos;add&apos;:</div><div class="line">                E.emit(&apos;add-user&apos;,req,res,db);</div><div class="line">                break;</div><div class="line">            case &apos;login&apos;:</div><div class="line">                E.emit(&apos;login-user&apos;,req,res,db);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    //注册</div><div class="line">    E.on(&apos;add-user&apos;, function (req, res, db) &#123;</div><div class="line">        var username=req.get.username;</div><div class="line">        var password=req.get.password;</div><div class="line"></div><div class="line">        var sql=`SELECT username FROM users WHERE username=&quot;$&#123;username&#125;&quot;`;</div><div class="line">        db.query(sql, function (err, data) &#123;</div><div class="line">            if(err)&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1,msg:&quot;数据库方面的问题&quot;&#125;));</div><div class="line">            &#125;else&#123;</div><div class="line">                if(data.length)&#123;</div><div class="line">                    res.end(JSON.stringify(&#123;err:1,msg:&quot;此用户名已存在&quot;&#125;));</div><div class="line">                &#125;else&#123;</div><div class="line">                    var I_SQL=`INSERT INTO users VALUES(null,&quot;$&#123;username&#125;&quot;,&quot;$&#123;md5(md5(password))&#125;&quot;)`;</div><div class="line">                    db.query(I_SQL, function (err, data) &#123;</div><div class="line">                        if(err)&#123;</div><div class="line">                            res.end(JSON.stringify(&#123;err:1,msg:&quot;数据库方面的问题&quot;&#125;));</div><div class="line">                        &#125;else&#123;</div><div class="line">                            res.end(JSON.stringify(&#123;err:0,msg:&quot;注册成功&quot;&#125;));</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    //登录</div><div class="line">    E.on(&apos;login-user&apos;, function (req, res, db) &#123;</div><div class="line">        var username=req.get.username;</div><div class="line">        var password=req.get.password;</div><div class="line"></div><div class="line">        var SQL=`SELECT * From users WHERE username=&quot;$&#123;username&#125;&quot;`;</div><div class="line">        db.query(SQL, function (err, data) &#123;</div><div class="line">            if(err)&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1,msg:&quot;数据库方面的问题&quot;&#125;));</div><div class="line">            &#125;else&#123;</div><div class="line">                if(data.length)&#123;</div><div class="line">                    if(data[0].password == md5(md5(password)))&#123;</div><div class="line">                        res.end(JSON.stringify(&#123;err:0,msg:&quot;登录成功&quot;&#125;));</div><div class="line">                    &#125;else&#123;</div><div class="line">                        res.end(JSON.stringify(&#123;err:1,msg:&quot;密码错误&quot;&#125;));</div><div class="line">                    &#125;</div><div class="line">                &#125;else&#123;</div><div class="line">                    res.end(JSON.stringify(&#123;err:1,msg:&quot;此用户不存在&quot;&#125;));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs——数据库操作mysql]]></title>
      <url>http://yoursite.com/2016/09/03/NodeJs%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9Cmysql/</url>
      <content type="html"><![CDATA[<h2 id="nodeJs中mysql的使用"><a href="#nodeJs中mysql的使用" class="headerlink" title="nodeJs中mysql的使用"></a>nodeJs中mysql的使用</h2><p>首先安装mysql模块</p>
<pre><code>npm install mysql
</code></pre><p>node连接数据库方法</p>
<pre><code>var db=mysql.createConnection({
    host:       &apos;localhost&apos;,
    user:       &apos;root&apos;,
    password:   &apos;xxxx&apos;,
    database:   &apos;数据库名称&apos;
})
</code></pre><p>编写sql</p>
<pre><code>db.query(sql,function(err,data){

})
</code></pre><h3 id="实现数据库添加，查询"><a href="#实现数据库添加，查询" class="headerlink" title="实现数据库添加，查询"></a>实现数据库添加，查询</h3><h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><h5 id="add-news-html"><a href="#add-news-html" class="headerlink" title="add_news.html"></a>add_news.html</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;js/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        var app=angular.module(&apos;app&apos;,[]);</div><div class="line"></div><div class="line">        app.controller(&apos;add-news&apos;, function ($scope, $http) &#123;</div><div class="line">            $scope.toAdd = function () &#123;</div><div class="line">                $http.get(&apos;news&apos;,&#123;</div><div class="line">                    params:&#123;act:&apos;add&apos;,title:$scope.title,href:$scope.href&#125;,</div><div class="line">                    responseType:&apos;json&apos;//</div><div class="line">                &#125;).success(function(res)&#123;</div><div class="line">                    alert(res.msg);</div><div class="line">                &#125;).error(function (err) &#123;</div><div class="line">                    console.log(err);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;body ng-app=&quot;app&quot;&gt;</div><div class="line">    &lt;div id=&quot;box&quot; ng-controller=&quot;add-news&quot;&gt;</div><div class="line">        &lt;h3&gt;添加新闻页面&lt;/h3&gt;</div><div class="line">        title:</div><div class="line">        &lt;input type=&quot;text&quot; id=&quot;t1&quot; ng-model=&quot;title&quot;&gt;</div><div class="line">        &lt;br&gt;</div><div class="line">        href:</div><div class="line">        &lt;input type=&quot;text&quot; id=&quot;t2&quot; ng-model=&quot;href&quot;&gt;</div><div class="line">        &lt;br&gt;</div><div class="line">        &lt;input type=&quot;button&quot; value=&quot;添加&quot; id=&quot;btn1&quot; ng-click=&quot;toAdd()&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h5 id="get-news-html"><a href="#get-news-html" class="headerlink" title="get_news.html"></a>get_news.html</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var app=angular.module(&apos;app&apos;,[]);</div><div class="line"></div><div class="line">    app.controller(&apos;getnews&apos;, function ($scope, $http) &#123;</div><div class="line">            $scope.data=[];</div><div class="line">            $http.get(&apos;news&apos;,&#123;</div><div class="line">                params:&#123;act:&apos;get&apos;&#125;,</div><div class="line">                responseType:&apos;json&apos;//</div><div class="line">            &#125;).success(function(res)&#123;</div><div class="line">                console.log(res);</div><div class="line">                $scope.data=res.data;</div><div class="line">            &#125;).error(function (err) &#123;</div><div class="line">                console.log(err);</div><div class="line">            &#125;)</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;body ng-app=&quot;app&quot;&gt;</div><div class="line">    &lt;div id=&quot;box&quot; ng-controller=&quot;getnews&quot;&gt;</div><div class="line">        &lt;h2&gt;读取新闻列表&lt;/h2&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li ng-repeat=&quot;item in data&quot;&gt;&lt;a href=&quot;&#123;&#123;item.href&#125;&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h4 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明:"></a>接口说明:</h4><pre><code>1001    数据库方面有问题

1002    新闻添加成功

1003    获取新闻成功

1004    获取新闻失败
</code></pre><h4 id="添加"><a href="#添加" class="headerlink" title="添加:"></a>添加:</h4><pre><code>news?act=add&amp;title=xxx&amp;href=xxx

    return  {code:1001/1002, msg:&quot;&quot;}
</code></pre><h4 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h4><pre><code>news?act=get
</code></pre><h4 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">const fs = require(&apos;fs&apos;);</div><div class="line">const os = require(&apos;os&apos;);</div><div class="line">const cluster = require(&apos;cluster&apos;);</div><div class="line">const EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line">const mysql=require(&apos;mysql&apos;)</div><div class="line">const urlLib=require(&apos;url&apos;);</div><div class="line"></div><div class="line">var cpus=os.cpus().length;//获取cpu核数</div></pre></td></tr></table></figure>
<h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if(cluster.isMaster)&#123;</div><div class="line">    for(var i=0;i&lt;cpus;i++)&#123;</div><div class="line">        cluster.fork();</div><div class="line">    &#125;</div><div class="line">    cluster.on(&apos;exit&apos;, function () &#123;</div><div class="line">        cluster.fork()</div><div class="line">    &#125;)</div><div class="line">&#125;else&#123;</div><div class="line">    //工作进程</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在工作进程写业务逻辑"><a href="#在工作进程写业务逻辑" class="headerlink" title="在工作进程写业务逻辑"></a>在工作进程写业务逻辑</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">//添加事件驱动</div><div class="line">var E=new EventEmitter();</div><div class="line">//http服务</div><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">    //get数据解析发布</div><div class="line">    E.emit(&apos;get-parse&apos;,req,res);</div><div class="line">&#125;).listen(8080);</div><div class="line"></div><div class="line">//get订阅</div><div class="line">E.on(&apos;get-parse&apos;, function (req, res) &#123;</div><div class="line">    //获取get参数</div><div class="line">    req.get=urlLib.parse(req.url,true).query;</div><div class="line">    //获取get url</div><div class="line">    req.url=urlLib.parse(req.url,true).pathname;</div><div class="line">    //业务-发布</div><div class="line">    E.emit(&apos;buss-on&apos;,req,res);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">E.on(&apos;buss-on&apos;, function (req, res) &#123;</div><div class="line">    var bool=E.emit(req.url,req,res);</div><div class="line">    //未定义的接口都返回false</div><div class="line">    if(bool == false)&#123;</div><div class="line">        //IO读写</div><div class="line">        E.emit(&apos;read-file&apos;,req,res);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">E.on(&apos;read-file&apos;, function (req, res) &#123;</div><div class="line">    //加载页面</div><div class="line">    var rs=fs.createReadStream(&apos;www&apos;+req.url);</div><div class="line">    rs.pipe(res);</div><div class="line">    rs.on(&apos;error&apos;, function () &#123;</div><div class="line">        res.writeHeader(404);</div><div class="line">        res.write(&apos;404&apos;);</div><div class="line">        res.end();</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//以下处理接口</div><div class="line">E.on(&apos;/news&apos;, function (req, res) &#123;</div><div class="line">//获取get-act参数 add为添加，get为查询</div><div class="line">    var act=req.get.act;</div><div class="line">    switch (act)&#123;</div><div class="line">        case &apos;add&apos;:</div><div class="line">            E.emit(&apos;news-add&apos;,req,res);</div><div class="line">            break;</div><div class="line">        case &apos;get&apos;:</div><div class="line">            E.emit(&apos;news-get&apos;,req,res);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">//添加新闻</div><div class="line">E.on(&apos;news-add&apos;, function (req,res) &#123;</div><div class="line">        //获取get参数</div><div class="line">        var title=req.get.title;</div><div class="line">        var href=req.get.href;</div><div class="line"></div><div class="line">        //连接数据库</div><div class="line">        var db=mysql.createConnection(&#123;</div><div class="line">            host:       &apos;localhost&apos;,</div><div class="line">            user:       &apos;root&apos;,</div><div class="line">            password:   &apos;root&apos;,</div><div class="line">            database:   &apos;user&apos;</div><div class="line">        &#125;)</div><div class="line">        //var sql=&apos;INSERT INTO news VALUES(null,&quot;&apos;+title+&apos;&quot;,&quot;&apos;+href+&apos;&quot;)&apos;;</div><div class="line">        var sql=`INSERT INTO news VALUES(null,&quot;$&#123;title&#125;&quot;,&quot;$&#123;href&#125;&quot;)`;//es6字符串拼接 `&quot;$&#123;str&#125;&quot;`</div><div class="line">        db.query(sql, function (err, data) &#123;</div><div class="line">            if(err)&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1001,msg:&quot;数据库方面问题&quot;&#125;))</div><div class="line">            &#125;else&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1002,msg:&quot;添加新闻成功&quot;&#125;))</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">//查询</div><div class="line">E.on(&apos;news-get&apos;, function (req, res) &#123;</div><div class="line">        var db=mysql.createConnection(&#123;</div><div class="line">            host:       &apos;localhost&apos;,</div><div class="line">            user:       &apos;root&apos;,</div><div class="line">            password:   &apos;root&apos;,</div><div class="line">            database:   &apos;user&apos;</div><div class="line">        &#125;)</div><div class="line">        var sql=`SELECT title,href FROM news`;</div><div class="line">        db.query(sql, function (err, data) &#123;</div><div class="line">            if(err)&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1001,msg:&quot;数据库方面问题&quot;&#125;))</div><div class="line">            &#125;else&#123;</div><div class="line">                res.end(JSON.stringify(&#123;err:1002,msg:&quot;获取新闻成功&quot;,data:data&#125;))</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/cuteshen/node-mysql-news" target="_blank" rel="external">https://github.com/cuteshen/node-mysql-news</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs——多进程]]></title>
      <url>http://yoursite.com/2016/09/01/NodeJs%E2%80%94%E2%80%94%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>nodejs是一个单进程单线程的服务器引擎，不管有多么的强大硬件，只能利用到单个CPU进行计算。所以，有人开发了第三方的cluster，让node可以利用多核CPU实现并行。</p>
<p>在V0.6.0版本，Nodejs内置了cluster的特性。</p>
</blockquote>
<h5 id="下面介绍cluster的用法："><a href="#下面介绍cluster的用法：" class="headerlink" title="下面介绍cluster的用法："></a>下面介绍cluster的用法：</h5><h2 id="cluster-——集群"><a href="#cluster-——集群" class="headerlink" title="cluster:——集群"></a>cluster:——集群</h2><p>”集群“——一堆物理机器，组合起来变成并行网络</p>
<p>cluster——一个进程、分裂出很多子进程(对应的就是cpu核数)</p>
<h3 id="主进程的工作"><a href="#主进程的工作" class="headerlink" title="主进程的工作:"></a>主进程的工作:</h3><p>a). 分裂工作进程</p>
<p>b). 子进程崩溃，重启</p>
<h3 id="子进程-工作进程"><a href="#子进程-工作进程" class="headerlink" title="子进程(工作进程):"></a>子进程(工作进程):</h3><p>主要工作，文件读取、服务器搭建…..</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>const cluster=require(&apos;cluter&apos;);
</code></pre><p>判断主进程还是工作进程</p>
<pre><code>cluster.isMaster        是否是主进程
cluster.isWorker            是否是工作进程
</code></pre><p>进程进程id:  pid</p>
<pre><code>process.pid
</code></pre><p>子进程崩溃事件:</p>
<pre><code>cluster.on(&apos;exit&apos;,function(){  //有人崩溃

})
</code></pre><p>实际应用</p>
<pre><code>//有子进程崩溃了
cluster.on(&apos;exit&apos;,function(worker,code,signal){
     //打印崩溃子进程的id
    console.log(worker.id);
    //重启进程
    cluster.fork();
});
</code></pre><p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line">const os=require(&apos;os&apos;);</div><div class="line">const cluster=require(&apos;cluster&apos;);</div><div class="line"></div><div class="line">//获取cpu核数</div><div class="line">var cpus=os.cpus().length;</div><div class="line"></div><div class="line">if(cluster.isMaster)&#123;</div><div class="line">    //主进程</div><div class="line">    //分裂</div><div class="line">    for(var i=0;i&lt;cpus; i++)&#123;</div><div class="line">        cluster.fork();</div><div class="line">    &#125;</div><div class="line">    //子崩溃了</div><div class="line">    cluster.on(&apos;exit&apos;, function (worker,code,signal) &#123;</div><div class="line">        //打印崩溃进程id</div><div class="line">        console.log(worker.id+&apos;崩溃了&apos;);</div><div class="line">        //分裂</div><div class="line">        cluster.fork();</div><div class="line">    &#125;)</div><div class="line">&#125;else&#123;</div><div class="line">    //工作进程</div><div class="line">    console.log(&apos;子进程ID：&apos;+cluster.worker.id);</div><div class="line">    http.createServer(function (req, res) &#123;</div><div class="line">        if(Marh.random() &lt; 0.5)&#123;</div><div class="line">            res.writei(&apos;well&apos;);//此处我故意写错</div><div class="line">            res.end();</div><div class="line">        &#125;else&#123;</div><div class="line">            res.write(&apos;well&apos;);</div><div class="line">            res.end();</div><div class="line">        &#125;</div><div class="line">    &#125;).listen(8080);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打印结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">子进程ID：1</div><div class="line">子进程ID：3</div><div class="line">子进程ID：2</div><div class="line">子进程ID：4</div><div class="line">d:\myjob\sql_cluster_md5\cluster.js:26</div><div class="line">        if(Marh.random() &lt; 0.5)&#123;</div><div class="line">           ^</div><div class="line"></div><div class="line">ReferenceError: Marh is not defined</div><div class="line">    at Server.&lt;anonymous&gt; (d:\myjob\sql_cluster_md5\cluster.js:26:12)</div><div class="line">    at emitTwo (events.js:87:13)</div><div class="line">    at Server.emit (events.js:172:7)</div><div class="line">    at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:527:12)</div><div class="line">    at HTTPParser.parserOnHeadersComplete (_http_common.js:88:23)</div><div class="line">d:\myjob\sql_cluster_md5\cluster.js:26</div><div class="line">        if(Marh.random() &lt; 0.5)&#123;</div><div class="line">           ^</div><div class="line"></div><div class="line">ReferenceError: Marh is not defined</div><div class="line">    at Server.&lt;anonymous&gt; (d:\myjob\sql_cluster_md5\cluster.js:26:12)</div><div class="line">    at emitTwo (events.js:87:13)</div><div class="line">    at Server.emit (events.js:172:7)</div><div class="line">    at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:527:12)</div><div class="line">    at HTTPParser.parserOnHeadersComplete (_http_common.js:88:23)</div><div class="line">4崩溃了</div><div class="line">2崩溃了</div><div class="line">子进程ID：5</div><div class="line">子进程ID：6</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs——文件下载]]></title>
      <url>http://yoursite.com/2016/09/01/NodeJs%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>在node中，实现文件下载，只需设置header即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res.setHeader(&apos;content-disposition&apos;,&apos;attachment&apos;);  //所有文件都下载</div></pre></td></tr></table></figure>
<p>另外attachment后还有个filename参数，用来定义下载文件名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res.setHeader(&apos;content-disposition&apos;,&apos;attachment;filename=&quot;xxx.xxx&quot;&apos;);</div></pre></td></tr></table></figure>
<p>用一个小例子体现一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line">const path=require(&apos;path&apos;);</div><div class="line"></div><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">    //获取url</div><div class="line">    var rs=fs.createReadStream(req.url.substring(1));</div><div class="line">    //定义可下载文件组</div><div class="line">    var downloadType=[&apos;.rar&apos;,&apos;.exe&apos;,&apos;.png&apos;,&apos;.jpg&apos;];</div><div class="line">    //获取文件后缀名</div><div class="line">    var extname=path.extname(req.url);</div><div class="line"></div><div class="line">    if(downloadType.indexOf(extname) != -1)&#123;</div><div class="line">        //时间戳</div><div class="line">        var filename=Date.now();</div><div class="line">        //写入头-content-disposition,attachment;filename&apos;&apos;;</div><div class="line">        res.setHeader(`content-disposition`,`attachment;filename=&quot;$&#123;filename&#125;$&#123;extname&#125;&quot;`);</div><div class="line">        //写入res</div><div class="line">        rs.pipe(res);</div><div class="line">    &#125;else&#123;</div><div class="line">        rs.pipe(res);</div><div class="line">    &#125;</div><div class="line">    rs.on(&apos;error&apos;, function () &#123;</div><div class="line">        res.writeHeader(404);</div><div class="line">        res.write(&apos;404&apos;);</div><div class="line">        res.end();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;).listen(8080)</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端自动化构建工具-gulp]]></title>
      <url>http://yoursite.com/2016/08/19/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7-gulp/</url>
      <content type="html"><![CDATA[<p>利用 Node.js 流实现前端资源文件的IO操作，其中包括第三方模块，需单独下载</p>
<p>先贴出官网的入门实例：</p>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><pre><code>npm install --global gulp
</code></pre><h3 id="作为项目的开发依赖（devDependencies）安装："><a href="#作为项目的开发依赖（devDependencies）安装：" class="headerlink" title="作为项目的开发依赖（devDependencies）安装："></a>作为项目的开发依赖（devDependencies）安装：</h3><pre><code>npm install --save-dev gulp
</code></pre><h3 id="在项目根目录下创建一个名为-gulpfile-js-的文件"><a href="#在项目根目录下创建一个名为-gulpfile-js-的文件" class="headerlink" title="在项目根目录下创建一个名为 gulpfile.js 的文件"></a>在项目根目录下创建一个名为 gulpfile.js 的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">    // 将你的默认的任务代码放在这</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接下来开始我们的代码:</p>
<blockquote>
<p>gulp-minify-css,gulp-less等第三方模块需通过npm去安装，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 引入 gulp及组件</div><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">    minifycss = require(&apos;gulp-minify-css&apos;),</div><div class="line">    less = require(&apos;gulp-less&apos;),</div><div class="line">    concat = require(&apos;gulp-concat&apos;),</div><div class="line">    uglify = require(&apos;gulp-uglify&apos;),</div><div class="line">    rename = require(&apos;gulp-rename&apos;),</div><div class="line">    jshint = require(&apos;gulp-jshint&apos;),</div><div class="line">    spritesmith = require(&apos;gulp.spritesmith&apos;);</div><div class="line"></div><div class="line">//定义项目目录</div><div class="line">option = &#123;</div><div class="line">    buildPath: &quot;&quot;,//构建目录</div><div class="line">    jsItem: []</div><div class="line">    //我这里只是为了操作指定的几个js文件，具体看资源目录</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="定义编译less文件的任务"><a href="#定义编译less文件的任务" class="headerlink" title="定义编译less文件的任务"></a>定义编译less文件的任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;lessback&apos;, function () &#123;</div><div class="line">    return gulp.src(option.buildPath + &apos;/less/*.less&apos;)//指定操作目录</div><div class="line">        .pipe(less())           //执行编译</div><div class="line">        .pipe(minifycss())      //执行压缩</div><div class="line">        .pipe(concat(&apos;mainLess.css&apos;)) //合并</div><div class="line">        .pipe(gulp.dest(option.buildPath + &apos;/cssmin/&apos;));//输出文件夹</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="压缩普通css"><a href="#压缩普通css" class="headerlink" title="压缩普通css"></a>压缩普通css</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;minifycss&apos;, function () &#123;</div><div class="line">    return gulp.src(option.buildPath + &apos;/css/*.css&apos;) //需要操作的文件</div><div class="line">        .pipe(rename(&#123;suffix: &apos;.min&apos;&#125;)) //rename压缩后的文件名</div><div class="line">        .pipe(minifycss())              //执行压缩</div><div class="line">        .pipe(concat(&apos;main.css&apos;))           //合并</div><div class="line">        .pipe(gulp.dest(option.buildPath + &apos;/cssmin/&apos;)); //输出文件夹</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="js语法检查"><a href="#js语法检查" class="headerlink" title="js语法检查"></a>js语法检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;jshint&apos;, function () &#123;</div><div class="line">    return gulp.src(option.buildPath + &apos;/js/*.js&apos;)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(&apos;default&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="压缩-合并-js"><a href="#压缩-合并-js" class="headerlink" title="压缩,合并 js"></a>压缩,合并 js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;minifyjs&apos;, function () &#123;</div><div class="line">    return gulp.src(option.jsItem)    //需要操作的文件</div><div class="line">        .pipe(concat(&apos;all.js&apos;))       //合并所有js到all.js</div><div class="line">        .pipe(gulp.dest(option.buildPath + &apos;/jsmin/&apos;)) //输出到文件夹</div><div class="line">        .pipe(rename(&#123;suffix: &apos;.min&apos;&#125;))     //rename压缩后的文件名</div><div class="line">        .pipe(uglify())    //压缩</div><div class="line">        .pipe(gulp.dest(option.buildPath + &apos;/jsmin/&apos;));  //输出</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在cmd中输入gulp后,执行的就是这个任务(压缩js需要在检查js之后操作)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;default&apos;, function () &#123;</div><div class="line">    option.buildPath = &quot;project/src&quot;;</div><div class="line">    //也可以直接操作整个js目录，通过 *.js去匹配</div><div class="line">    option.jsItem = [option.buildPath + &quot;/js/script.js&quot;, option.buildPath + &quot;/js/script2.js&quot;];</div><div class="line">    gulp.start(&apos;lessback&apos;, &apos;jshint&apos;, &apos;minifycss&apos;, &apos;minifyjs&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>cmd输如gulp后，默认执行default，通过gulp.start执行上面所定义的方法即可执行;</p>
<h3 id="gulp将多张图片自动合成雪碧图"><a href="#gulp将多张图片自动合成雪碧图" class="headerlink" title="gulp将多张图片自动合成雪碧图"></a>gulp将多张图片自动合成雪碧图</h3><blockquote>
<p>再也不用拿ps去一张一张去拼图了</p>
</blockquote>
<p><img src="/img/16081902.png" alt="img"></p>
<p>首先安装模块并引入</p>
<pre><code>npm install gulp.spritesmith
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var spritesmith=require(‘gulp.spritesmith‘);</div><div class="line"></div><div class="line">gulp.task(&apos;sprite&apos;, function () &#123;</div><div class="line">    console.log(option.buildPath +&apos;/images/&apos;);</div><div class="line">    return gulp.src(option.buildPath +&apos;/images/*.png&apos;)//需要合并的图片地址</div><div class="line">        .pipe(spritesmith(&#123;</div><div class="line">            imgName: &apos;sprite/images/sprite.png&apos;,//保存合并后图片的地址</div><div class="line">            cssName: &apos;sprite/css/sprite.css&apos;,//保存合并后对于css样式的地址</div><div class="line">            padding: 5,//合并时两个图片的间距</div><div class="line">            algorithm: &apos;binary-tree&apos;,//注释1</div><div class="line">            cssTemplate:option.buildPath+&quot;/images/sprite/model/handlebarsStr.css&quot;//注释2</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(option.buildPath+&apos;/images/&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注释一：</p>
<p>Algorithm 有四个可选值分别为top-down、left-right、diagonal、alt-diagonal、binary-tree</p>
<p><img src="/img/16081901.png" alt="img"></p>
<p>注释二：</p>
<p>cssTemplate 是生成css的模板文件可以是字符串也可以是函数。是字符串是对于相对于的模板地址 对于模板文件样式格式是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;#sprites&#125;&#125;</div><div class="line">.icon-&#123;&#123;name&#125;&#125;&#123;</div><div class="line">    background-image: url(&quot;&#123;&#123;escaped_image&#125;&#125;&quot;);</div><div class="line">    background-position: &#123;&#123;px.offset_x&#125;&#125; &#123;&#123;px.offset_y&#125;&#125;;</div><div class="line">    width: &#123;&#123;px.width&#125;&#125;;</div><div class="line">    height: &#123;&#123;px.height&#125;&#125;;</div><div class="line">&#125;</div><div class="line">&#123;&#123;/sprites&#125;&#125;</div></pre></td></tr></table></figure>
<p>——模版文件需要提前再项目目录下创建，并通过cssTemplate指定位置</p>
<p>如果是函数的话，这可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;sprite&apos;, function () &#123;</div><div class="line">    console.log(option.buildPath +&apos;/images/&apos;);</div><div class="line">    return gulp.src(option.buildPath +&apos;/images/*.png&apos;)//需要合并的图片地址</div><div class="line">        .pipe(spritesmith(&#123;</div><div class="line">            imgName: &apos;sprite/images/sprite.png&apos;,//保存合并后图片的地址</div><div class="line">            cssName: &apos;sprite/css/sprite.css&apos;,//保存合并后对于css样式的地址</div><div class="line">            padding: 5,//合并时两个图片的间距</div><div class="line">            algorithm: &apos;binary-tree&apos;,//注释1</div><div class="line">            cssTemplate: function (data) &#123;</div><div class="line">                var arr=[];</div><div class="line">                data.sprites.forEach(function (sprite) &#123;</div><div class="line">                    arr.push(&quot;.icon-&quot;+sprite.name+</div><div class="line">                    &quot;&#123;&quot; +</div><div class="line">                    &quot;background-image: url(‘&quot;+sprite.escaped_image+&quot;‘);&quot;+</div><div class="line">                    &quot;background-position: &quot;+sprite.px.offset_x+&quot;px &quot;+sprite.px.offset_y+&quot;px;&quot;+</div><div class="line">                    &quot;width:&quot;+sprite.px.width+&quot;;&quot;+</div><div class="line">                    &quot;height:&quot;+sprite.px.height+&quot;;&quot;+</div><div class="line">                    &quot;&#125;\n&quot;);</div><div class="line">                &#125;);</div><div class="line">                return arr.join(&quot;&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(option.buildPath+&apos;/images/&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>最终再default中gulp.start(‘sprite’)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;default&apos;, function () &#123;</div><div class="line">    option.buildPath = &quot;project/src&quot;;</div><div class="line">    option.jsItem = [option.buildPath + &quot;/js/script.js&quot;, option.buildPath + &quot;/js/script2.js&quot;];</div><div class="line">    gulp.start(&apos;sprite&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h6 id="到此gulp构建工具就初步完成了，只是初步，待完善。"><a href="#到此gulp构建工具就初步完成了，只是初步，待完善。" class="headerlink" title="到此gulp构建工具就初步完成了，只是初步，待完善。"></a>到此gulp构建工具就初步完成了，只是初步，待完善。</h6>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs——Stream流]]></title>
      <url>http://yoursite.com/2016/08/19/Nodejs%E2%80%94%E2%80%94Stream%E6%B5%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>所谓流：就是一组连续的数据（文件流、网络流…)</p>
</blockquote>
<h4 id="之前的文件操作通过通过fs-readFile进行读取有以下弊端"><a href="#之前的文件操作通过通过fs-readFile进行读取有以下弊端" class="headerlink" title="之前的文件操作通过通过fs.readFile进行读取有以下弊端"></a>之前的文件操作通过通过fs.readFile进行读取有以下弊端</h4><p>1,把文件读取到内存中</p>
<p>2,内存不足、卡顿</p>
<p>3,造成 IO峰值</p>
<p>4,数据混乱</p>
<p>5,耗时</p>
<p>6,操作文件会有各种限制（文件大小限制…）</p>
<h4 id="通过流进行文件操作"><a href="#通过流进行文件操作" class="headerlink" title="通过流进行文件操作"></a>通过流进行文件操作</h4><p>流可分为：</p>
<p>1,读取流——req</p>
<p>2,写入流——res</p>
<p>3,读写流——文件压缩</p>
<p>之前创建http服务时有这样的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http.createServer(function(req,res)&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>读取流，就相当于<code>req</code>,写入流就相当于<code>res</code></p>
<p>读写流常用在文件压缩等功能</p>
<h5 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h5><p>抛开之前的<code>fs.writeFile()</code>方法,将内容写入ccc.txt文件，若没有ccc.txt文件，则创建一个ccc.txt文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">var ws=fs.createWriteStream(&apos;ccc.txt&apos;);  //创建了一个写入流</div><div class="line"></div><div class="line">ws.write(&apos;abcd&apos;);</div><div class="line"></div><div class="line">ws.end();</div><div class="line"></div><div class="line">ws.on(&apos;finish&apos;,function()&#123;</div><div class="line">    console.log(&apos;写入完毕&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h5 id="读取流"><a href="#读取流" class="headerlink" title="读取流"></a>读取流</h5><p>项目目录有一个aaa.txt文件，文件内容为aaa</p>
<p>执行读取:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">var rs=fs.createReadStream(&apos;aaa.txt&apos;);</div><div class="line"></div><div class="line">var arr=[];</div><div class="line"></div><div class="line">rs.on(&apos;data&apos;,function(b)&#123;</div><div class="line">    arr.push(b);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">rs.on(&apos;end&apos;,function()&#123;</div><div class="line">    var buffer=Buffer.concat(arr);</div><div class="line">    console.log(buffer.toString());</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>另外针对stream的err捕获，无法通过try()catch(e){}捕获到，try捕获是程序异常，而流操作，走的是系统；</p>
<p>rs同requst一样有着监听事件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rs.on(&apos;error&apos;,function(err)&#123;</div><div class="line">    console.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h5 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h5><p>和unix一样，node stream主要的操作也是.pipe()</p>
<pre><code>源头.pipe(目标)

读取.pipe(写入)
</code></pre><p>将bbb.txt文件内容写入到ddd.txt文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">var rs=fs.createReadStream(&apos;bbb.txt&apos;);</div><div class="line">var ws=fs.createWriteStream(&apos;ddd.txt&apos;);</div><div class="line"></div><div class="line">//读取.pipe(写入)</div><div class="line">rs.pipe(ws);</div><div class="line"></div><div class="line">ws.on(&apos;finish&apos;,function()&#123;</div><div class="line">    console.log(&apos;读写完毕&apos;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h5 id="读写流——实现文件压缩"><a href="#读写流——实现文件压缩" class="headerlink" title="读写流——实现文件压缩"></a>读写流——实现文件压缩</h5><blockquote>
<p>需要引入第三方模块<code>zlib</code></p>
</blockquote>
<pre><code>npm install zlib
</code></pre><p>程序代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const zLib=require(&apos;zlib&apos;);</div><div class="line"></div><div class="line">var gz=zlib.createGzip();//选择压缩模式-gzip</div><div class="line"></div><div class="line">//准备2个流</div><div class="line">var rs=fs.createReadStream(&apos;aaa.txt&apos;);</div><div class="line">var ws=fs.createWriteStream(&apos;aaa.txt.gz&apos;);</div><div class="line"></div><div class="line">//执行压缩</div><div class="line">rs.pipe(gz).pipe(ws);</div></pre></td></tr></table></figure></p>
<p>执行后，项目目录会生成名字为‘aaa.txt.gz’的压缩文件</p>
<blockquote>
<p>gz压缩格式特点——修改.gz文件名称，压缩文件会跟着压缩包名字改变</p>
</blockquote>
<p>执行代码，先对文件进行gzip压缩，再输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line">const zlib=require(&apos;zlib&apos;);</div><div class="line"></div><div class="line">http.createServer(function(req,res)&#123;</div><div class="line">    var gz=zlib.createGzip();</div><div class="line">    var rs=fs.createReadStream(&apos;222.txt&apos;);</div><div class="line"></div><div class="line">    rs.pipe(gz).pipe(res);</div><div class="line"></div><div class="line">&#125;).listen(8081);</div></pre></td></tr></table></figure></p>
<p>此时打开浏览器localhost:8081会直接下载222.txt文件，而不是输出文件内容</p>
<p>设置header</p>
<pre><code>res.setHeader(&apos;content-encoding&apos;,&apos;gzip&apos;)
</code></pre><p>完整代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line">const zlib=require(&apos;zlib&apos;);</div><div class="line"></div><div class="line">http.createServer(function(req,res)&#123;</div><div class="line">    var gz=zlib.createGzip();</div><div class="line">    var rs=fs.createReadStream(&apos;222.txt&apos;);</div><div class="line"></div><div class="line">    res.setHeader(&apos;content-encoding&apos;,&apos;gzip&apos;)</div><div class="line">    rs.pipe(gz).pipe(res);</div><div class="line"></div><div class="line">&#125;).listen(8081);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[split()函数在buffer中的实现]]></title>
      <url>http://yoursite.com/2016/08/19/split()%E5%87%BD%E6%95%B0%E5%9C%A8buffer%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="javascript中的用法："><a href="#javascript中的用法：" class="headerlink" title="javascript中的用法："></a>javascript中的用法：</h2><blockquote>
<p>split() 方法用于把一个字符串分割成字符串数组。</p>
</blockquote>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>stringObject.split(separator,howmany)</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><code>separator</code> 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。</p>
<p><code>howmany</code> 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">str=&quot;2,2,3,5,6,6&quot;; //这是一字符串</div><div class="line">var strs= new Array(); //定义一数组</div><div class="line">strs=str.split(&quot;,&quot;); //字符分割</div><div class="line">for (i=0;i&lt;strs.length ;i++ )</div><div class="line">&#123;</div><div class="line">document.write(strs[i]+&quot;&lt;br&gt;&quot;); //分割后的字符输出</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码输出结果为：2 2 3 5 6</p>
<h2 id="buffer中的实现"><a href="#buffer中的实现" class="headerlink" title="buffer中的实现"></a>buffer中的实现</h2><p>nodeJs开发操作buffer时，buffer中是没有split()方法的;</p>
<p>如下代码执行会报错<code>TypeError: buffer.splice is not a function</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var buffer=new Buffer(&apos;width height background apple banana&apos;);</div><div class="line">console.log(buffer.splice(&apos; &apos;))</div></pre></td></tr></table></figure></p>
<p>因此需要自己实现split()方法；</p>
<p>1，toString()，不建议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var buffer=new Buffer(&apos;width height&apos;);</div><div class="line"></div><div class="line">console.log(buffer.toString().split(&apos; &apos;));</div><div class="line"></div><div class="line">//[ &apos;width&apos;, &apos;height&apos; ]</div></pre></td></tr></table></figure></p>
<p>buffer数据tostring之后，想再回到buffer，数据就被损坏了，因此不建议toString;</p>
<h5 id="通过slice："><a href="#通过slice：" class="headerlink" title="通过slice："></a>通过slice：</h5><p>buffer中是可以使用slice方法的，因此可以通过使用slice() 达到split的效果</p>
<blockquote>
<p>bufferSplit(buffer数据，切割字符串);</p>
</blockquote>
<p>首先创建buffer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var buffer=new Buffer(&apos;width height background apple banana&apos;);</div></pre></td></tr></table></figure></p>
<p>这时输出buffer是一个连续的文件流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(buffer);</div><div class="line">//&lt;Buffer 77 69 64 74 68 20 68 65 69 67 68 74 20 62 61 63 6b 67 72 6f 75 6e 64 20 61 70 70 6c 65 20 62 61 6e 61 6e 61&gt;</div></pre></td></tr></table></figure></p>
<p>若要得到buffer中的某一段数据，则需要先进行切割：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var buffer=new Buffer(&apos;width height background apple banana&apos;);</div><div class="line">var b=new Buffer(&apos; &apos;); //分割标志</div><div class="line"></div><div class="line">var arr=[];</div><div class="line">var start=0;//开始位置</div><div class="line">var index=0;//b开始的位置</div><div class="line"></div><div class="line">while((index=buffer.indexOf(b,start))!=-1)&#123;</div><div class="line">    arr.push(buffer.slice(start,index));</div><div class="line">    start=index+b.length;</div><div class="line">&#125;</div><div class="line">arr.push(buffer.slice(start));</div><div class="line">console.log(arr);</div><div class="line">//输出结果：</div><div class="line">[ &lt;Buffer 77 69 64 74 68&gt;,</div><div class="line">  &lt;Buffer 68 65 69 67 68 74&gt;,</div><div class="line">  &lt;Buffer 62 61 63 6b 67 72 6f 75 6e 64&gt;,</div><div class="line">  &lt;Buffer 61 70 70 6c 65&gt;,</div><div class="line">  &lt;Buffer 62 61 6e 61 6e 61&gt; ]</div><div class="line"></div><div class="line">console.log(arr.toString());</div><div class="line">//输出结果:width,height,background,apple,banana</div></pre></td></tr></table></figure></p>
<p>实际应用中，可以将此方法进行封装，或以模块的形式导入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function bufferSplit(buffer,spliter)&#123;</div><div class="line">    var b=new Buffer(spliter);</div><div class="line">    var arr=[];</div><div class="line">    var start=0;</div><div class="line">    var index=0;</div><div class="line">    while((index=buffer.indexOf(b,start))!=-1)&#123;</div><div class="line">        arr.push(buffer.slice(start,index));</div><div class="line">        start=index+b.length;</div><div class="line">    &#125;</div><div class="line">    arr.push(buffer.slice(start));</div><div class="line">    return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs——post第三方模块]]></title>
      <url>http://yoursite.com/2016/08/16/NodeJs%E2%80%94%E2%80%94post%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>上篇写了post数据multipart/form-data形式的文件上传方法，既然代码那么多，那不如直接用第三方模块去实现，一边提升开发效率，介绍2个第三方模块，分别是formidable和multer</p>
<h3 id="formidable"><a href="#formidable" class="headerlink" title="formidable"></a>formidable</h3><blockquote>
<p>以文件形式上传</p>
</blockquote>
<p>首先需要从npm安装模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install formidable</div></pre></td></tr></table></figure>
<p>html代码,file-multiple可上传多个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;http://localhost:8080/abc&quot; method=&quot;post&quot;  enctype=&quot;multipart/form-data&quot; &gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot;/&gt;</div><div class="line">    &lt;br/&gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;age&quot; id=&quot;age&quot;/&gt;</div><div class="line">    &lt;br/&gt;</div><div class="line">    &lt;input type=&quot;file&quot; name=&quot;pic&quot; id=&quot;pic&quot; multiple/&gt;</div><div class="line">    &lt;input type=&quot;submit&quot;/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>node代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const formidable=require(&apos;formidable&apos;);</div><div class="line"></div><div class="line">http.createServer(function(req,res)&#123;</div><div class="line">    //需要实例化formidable模块中的IncomingForm()方法</div><div class="line">    var form=new formidable.IncomingForm();</div><div class="line"></div><div class="line">    form.parse(req,function(err,fileds,files)&#123;</div><div class="line">        console.log(fileds, files);</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(8081);</div></pre></td></tr></table></figure>
<p>表单填写：name:abc; age:abc; pic:1.jpg,pic:2.jpg提交表单</p>
<p>fileds为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; name: &apos;abc&apos;, age: &apos;abc&apos; &#125;</div></pre></td></tr></table></figure>
<p>files为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123; pic:</div><div class="line">   [ File &#123;</div><div class="line">       domain: null,</div><div class="line">       _events: &#123;&#125;,</div><div class="line">       _eventsCount: 0,</div><div class="line">       _maxListeners: undefined,</div><div class="line">       size: 693534,</div><div class="line">       path: &apos;upload\\upload_701ff760b9dcba389d87dcb89d93adfb&apos;,</div><div class="line">       name: &apos;1.jpg&apos;,</div><div class="line">       type: &apos;image/jpeg&apos;,</div><div class="line">       hash: null,</div><div class="line">       lastModifiedDate: Tue Aug 16 2016 17:26:50 GMT+0800 (中国标准时间),</div><div class="line">       _writeStream: [Object] &#125;,</div><div class="line">     File &#123;</div><div class="line">       domain: null,</div><div class="line">       _events: &#123;&#125;,</div><div class="line">       _eventsCount: 0,</div><div class="line">       _maxListeners: undefined,</div><div class="line">       size: 232615,</div><div class="line">       path: &apos;upload\\upload_a00ba7289c3690b2d45aa2910a84d0f1&apos;,</div><div class="line">       name: &apos;2.jpg&apos;,</div><div class="line">       type: &apos;image/jpeg&apos;,</div><div class="line">       hash: null,</div><div class="line">       lastModifiedDate: Tue Aug 16 2016 17:26:50 GMT+0800 (中国标准时间),</div><div class="line">       _writeStream: [Object] &#125; ] &#125;</div></pre></td></tr></table></figure></p>
<p>其中几个常用的字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">files.pic</div><div class="line">	.size</div><div class="line">	.path	//临时把文件放到 c盘里面</div><div class="line">	.name</div><div class="line">	.type</div><div class="line">	.lastModifiedDate</div></pre></td></tr></table></figure></p>
<p>其中path是没有后缀名的文件名称，因此需要用到fs.rename方法将后缀名添加进去</p>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const formidable=require(&apos;formidable&apos;);</div><div class="line">const path=require(&apos;path&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">    var form= new formidable.IncomingForm();</div><div class="line">    form.uploadDir=&apos;upload&apos;;</div><div class="line">    form.multiples=true;</div><div class="line"></div><div class="line">    form.parse(req, function(err, fields, files) &#123;</div><div class="line">        var arrFiles=files.pic;</div><div class="line">        for(var i=0; i &lt; arrFiles.length; i++)&#123;</div><div class="line">            //获取文件后缀名</div><div class="line">            var extname=path.extname(arrFiles[i].name);</div><div class="line">            //修改path名称，添加后缀名</div><div class="line">            fs.rename(arrFiles[i].path,arrFiles[i].path+extname, function (err) &#123;</div><div class="line">                console.log(err);</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure>
<h4 id="multer"><a href="#multer" class="headerlink" title="multer"></a>multer</h4><blockquote>
<p>以二进制流形式上传</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install multer</div></pre></td></tr></table></figure>
<p>设置上传目录，及文件类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var multer=multerLib(&#123;dest:&apos;upload&apos;&#125;);//设置文件上传路径</div><div class="line">var multerHandler=multer.any();//设置文件类型为任何类型</div></pre></td></tr></table></figure></p>
<p>回调方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">multerHandler(req,res,function()&#123;</div><div class="line">    console.log(req.body.name);//user内容</div><div class="line">    console.log(req.body.age);//age内容</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>其中req.files内容为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[ &#123; fieldname: &apos;pic&apos;,</div><div class="line">    originalname: &apos;1.jpg&apos;,</div><div class="line">    encoding: &apos;7bit&apos;,</div><div class="line">    mimetype: &apos;image/png&apos;,</div><div class="line">    destination: &apos;upload&apos;,</div><div class="line">    filename: &apos;82519811ec7e4793c658e6dbd75dcd6a&apos;,</div><div class="line">    path: &apos;upload\\82519811ec7e4793c658e6dbd75dcd6a&apos;,</div><div class="line">    size: 693534 &#125;,</div><div class="line">  &#123; fieldname: &apos;pic&apos;,</div><div class="line">    originalname: &apos;2.jpg&apos;,</div><div class="line">    encoding: &apos;7bit&apos;,</div><div class="line">    mimetype: &apos;image/jpeg&apos;,</div><div class="line">    destination: &apos;upload&apos;,</div><div class="line">    filename: &apos;7f3b211b0127e872e9ca0bd1d6dea6a7&apos;,</div><div class="line">    path: &apos;upload\\7f3b211b0127e872e9ca0bd1d6dea6a7&apos;,</div><div class="line">    size: 232615 &#125; ]</div></pre></td></tr></table></figure></p>
<p>重写名称，添加后缀<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for(var files in req.files)&#123;</div><div class="line">    //获取后缀名</div><div class="line">    var extname=path.extname(req.files[files].originalname);</div><div class="line">    //重写文件名称</div><div class="line">    fs.rename(req.files[files].path,req.files[files].path+extname, function (err) &#123;</div><div class="line">        console.log(err);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完整代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const multerLib=require(&apos;multer&apos;);</div><div class="line">const path=require(&apos;path&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">    var multer=multerLib(&#123;dest:&apos;upload&apos;&#125;);</div><div class="line">    var multerHandler=multer.any();</div><div class="line"></div><div class="line">    multerHandler(req,res,function()&#123;</div><div class="line">        console.log(req.files);</div><div class="line"></div><div class="line">        for(var files in req.files)&#123;</div><div class="line">            var extname=path.extname(req.files[files].originalname);</div><div class="line">            console.log(req.files[files].originalname);</div><div class="line">            fs.rename(req.files[files].path,req.files[files].path+extname, function (err) &#123;</div><div class="line">                console.log(err);</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure></p>
<p>两个模块具体api信息，还需参阅npm官网</p>
<p><a href="https://www.npmjs.com/package/formidable" target="_blank" rel="external">https://www.npmjs.com/package/formidable</a></p>
<p><a href="https://www.npmjs.com/package/multer" target="_blank" rel="external">https://www.npmjs.com/package/multer</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs——post数据深入解析]]></title>
      <url>http://yoursite.com/2016/08/16/NodeJs%E2%80%94%E2%80%94post%E6%95%B0%E6%8D%AE%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="multipart-form-data和application-x-www-form-urlencoded的区别"><a href="#multipart-form-data和application-x-www-form-urlencoded的区别" class="headerlink" title="multipart/form-data和application/x-www-form-urlencoded的区别"></a>multipart/form-data和application/x-www-form-urlencoded的区别</h3><p>FORM元素的enctype属性指定了表单数据向服务器提交时所采用的编码类型，默认的缺省值是<code>application/x-www-form-urlencoded</code>。</p>
<p>然而，在向服务器发送大量的文本、包含非ASCII字符的文本或二进制数据时这种编码方式效率很低。</p>
<p>  在文件上载时，所使用的编码类型应当是<code>multipart/form-data</code>，它既可以发送文本数据，也支持二进制数据上载。</p>
<p>客户端端<code>&lt;form&gt;</code>表单的ENCTYPE属性值为<code>multipart/form-data</code>，它告诉我们传输的数据要用到多媒体传输协议，由于多媒体传输的都是大量的数据，所以规定上传文件必须是post方法，<code>&lt;input&gt;</code>的type属性必须是file。</p>
<h3 id="通过multipart-form-data获取数据"><a href="#通过multipart-form-data获取数据" class="headerlink" title="通过multipart/form-data获取数据"></a>通过<code>multipart/form-data</code>获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;http://localhost:8081/abc&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">    user:</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;input type=&quot;file&quot; name=&quot;file1&quot;&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;input type=&quot;submit&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>提交后，通过<code>req.headers[&#39;content-type&#39;]</code>得到的数据是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">multipart/form-data; boundary=----WebKitFormBoundaryqFAIe2bYb7F35kSq</div></pre></td></tr></table></figure>
<h4 id="执行post数据解析相关操作获取post信息"><a href="#执行post数据解析相关操作获取post信息" class="headerlink" title="执行post数据解析相关操作获取post信息"></a>执行post数据解析相关操作获取post信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var arr=[];</div><div class="line">req.on(&apos;data&apos;,function(s)&#123;</div><div class="line">    arr.push(s);</div><div class="line">&#125;);</div><div class="line"> req.on(&apos;end&apos;,function()&#123;</div><div class="line">    var buffer=Buffer.concat(arr);</div><div class="line">    //console.log(buffer.toString());</div><div class="line">    if(mime==&apos;multipart/form-data&apos;)&#123;</div><div class="line">        //文件型</div><div class="line">    &#125;else&#123;</div><div class="line">        //普通post数据</div><div class="line">        post=querystring.parse(buffer.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    console.log(post);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述代码中所获取的post信息存在arr中，并通过Buffer.concat拼接</p>
<p>所得到的内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">------WebKitFormBoundaryLBhBQAIOiPjVA13J</div><div class="line">Content-Disposition: form-data; name=&quot;user&quot;</div><div class="line"></div><div class="line">myname</div><div class="line">------WebKitFormBoundaryLBhBQAIOiPjVA13J</div><div class="line">Content-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;右上角LOGO.jpg&quot;</div><div class="line">Content-Type: image/jpeg</div><div class="line"></div><div class="line">//此处为图片二进制流信息，太长了就不复制进来了</div></pre></td></tr></table></figure>
<p>通过一些列字符串操作及切割方法最终要得到表单信息<code>user</code>及<code>file</code>，下面是所有的代码</p>
<h4 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const querystring=require(&apos;querystring&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">http.createServer(function(req,res)&#123;</div><div class="line"></div><div class="line">    parsePostDeep(req,function(fileds,files)&#123;</div><div class="line">        console.log(fileds,files)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;).listen(8081);</div></pre></td></tr></table></figure>
<h4 id="解析multipart-form-data信息"><a href="#解析multipart-form-data信息" class="headerlink" title="解析multipart/form-data信息"></a>解析<code>multipart/form-data</code>信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">function parsePostDeep(req,fnCb)&#123;</div><div class="line">    var post=&#123;&#125;;</div><div class="line">    var files=&#123;&#125;;</div><div class="line"></div><div class="line">    //multipart/form-data; boundary=----WebKitFormBoundaryqFAIe2bYb7F35kSq</div><div class="line">    //console.log(req.headers[&apos;content-type&apos;]);</div><div class="line">    if(req.headers[&apos;content-type&apos;])&#123;</div><div class="line">        var mime=req.headers[&apos;content-type&apos;].split(&apos;; &apos;)[0];</div><div class="line">        var boundaryInfo=req.headers[&apos;content-type&apos;].split(&apos;; &apos;)[1];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var arr=[];</div><div class="line">    req.on(&apos;data&apos;,function(s)&#123;</div><div class="line">        arr.push(s);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    req.on(&apos;end&apos;,function()&#123;</div><div class="line">        var buffer=Buffer.concat(arr);</div><div class="line">        //console.log(buffer.toString());</div><div class="line">        if(mime==&apos;multipart/form-data&apos;)&#123;</div><div class="line">            //文件型</div><div class="line">            var boundary=&apos;--&apos;+boundaryInfo.split(&apos;=&apos;)[1];</div><div class="line">            //切</div><div class="line">            var arrBuffer=bufferSplit(buffer,boundary);</div><div class="line"></div><div class="line">            //删除首尾</div><div class="line">            arrBuffer.pop();</div><div class="line">            arrBuffer.shift();</div><div class="line"></div><div class="line">            //去除数组中的每个首尾换行 -&gt; \r\n</div><div class="line">            for(var i=0; i&lt;arrBuffer.length; i++)&#123;</div><div class="line">                arrBuffer[i]=arrBuffer[i].slice(2,arrBuffer[i].length-2);</div><div class="line">            &#125;</div><div class="line">            //用两个换行切每个buffer</div><div class="line">            for(var i=0; i&lt;arrBuffer.length; i++)&#123;</div><div class="line">                var arrBufferInfo=bufferSplit(arrBuffer[i],&apos;\r\n\r\n&apos;);</div><div class="line"></div><div class="line">                //内容</div><div class="line">                var content=arrBufferInfo[1];</div><div class="line">                //其他相关信息 name filename filetype</div><div class="line">                //区分开file和post字段</div><div class="line">                if(arrBufferInfo[0].indexOf(&apos;\r\n&apos;)!=-1)&#123;</div><div class="line">                    //files</div><div class="line">                    var arrFilesInfo=bufferSplit(arrBufferInfo[0],&apos;\r\n&apos;);</div><div class="line">                    var name=querystring.parse(arrFilesInfo[0].toString(),&apos;; &apos;).name;</div><div class="line">                    name=name.substring(1,name.length-1);</div><div class="line">                    var filename=querystring.parse(arrFilesInfo[0].toString(),&apos;; &apos;).filename;</div><div class="line">                    filename=filename.substring(1,filename.length-1);</div><div class="line"></div><div class="line">                    var filetype=arrFilesInfo[1].toString().split(&apos;: &apos;)[1];</div><div class="line"></div><div class="line">                    //console.log(name,filename,filetype);</div><div class="line"></div><div class="line">                    files[name]=&#123;</div><div class="line">                        filename:filename,</div><div class="line">                        filetype:filetype,</div><div class="line">                        content:content</div><div class="line">                    &#125;;</div><div class="line">                &#125;else&#123;</div><div class="line">                    //普通</div><div class="line">                    var name=querystring.parse(arrBufferInfo[0].toString(),&apos;; &apos;).name;</div><div class="line">                    name=name.substring(1,name.length-1);</div><div class="line"></div><div class="line">                    post[name]=content.toString();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            //console.log(arrBuffer.toString());</div><div class="line">        &#125;else&#123;</div><div class="line">            //普通post数据</div><div class="line">            post=querystring.parse(buffer.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        fnCb &amp;&amp; fnCb(post,files);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="buffer切割方法（上个方法里面有用到）"><a href="#buffer切割方法（上个方法里面有用到）" class="headerlink" title="buffer切割方法（上个方法里面有用到）"></a>buffer切割方法（上个方法里面有用到）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function bufferSplit(buffer,spliter)&#123;</div><div class="line">    var b=new Buffer(spliter);</div><div class="line">    var arr=[];</div><div class="line">    var start=0;</div><div class="line">    var index=0;</div><div class="line">    while((index=buffer.indexOf(b,start))!=-1)&#123;</div><div class="line">        arr.push(buffer.slice(start,index));</div><div class="line">        start=index+b.length;</div><div class="line">    &#125;</div><div class="line">    arr.push(buffer.slice(start));</div><div class="line">    return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终得到post数据信息</p>
<blockquote>
<p>下一篇介绍 post解析<code>multipart/form-data</code>数据的插件使用。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JSON字符串转换为JSON对象的2种方式]]></title>
      <url>http://yoursite.com/2016/08/12/JSON%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAJSON%E5%AF%B9%E8%B1%A1%E7%9A%842%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>在JS中将JSON的字符串解析成JSON数据格式，一般有两种方式：</p>
<blockquote>
<p>1.使用eval()函数。</p>
<p>2.使用Function对象来进行返回解析。</p>
</blockquote>
<h4 id="第一种解析方式：使用eval函数来解析"><a href="#第一种解析方式：使用eval函数来解析" class="headerlink" title="第一种解析方式：使用eval函数来解析"></a>第一种解析方式：使用eval函数来解析</h4><p>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var data = &quot; &#123;</div><div class="line">root:</div><div class="line">    [</div><div class="line">        &#123;name: &apos;1&apos;, value: &apos;0&apos;&#125;,</div><div class="line">        &#123;name: &apos;6101&apos;, value: &apos;北京市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6102&apos;, value: &apos;天津市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6103&apos;, value: &apos;上海市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6104&apos;, value: &apos;重庆市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6105&apos;, value: &apos;渭南市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6106&apos;, value: &apos;延安市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6107&apos;, value: &apos;汉中市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6108&apos;, value: &apos;榆林市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6109&apos;, value: &apos;安康市&apos;&#125;,</div><div class="line">        &#123;name: &apos;6110&apos;, value: &apos;商洛市&apos;&#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line">&quot;;</div></pre></td></tr></table></figure></p>
<p>将该字符串放于eval()中执行一次。这种方式也适合以普通JavaScipt方式获取json对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var dataObj = eval(&quot;(&quot; + data + &quot;)&quot;);  // 转换为json对象</div></pre></td></tr></table></figure></p>
<h4 id="使用Function对象来完成"><a href="#使用Function对象来完成" class="headerlink" title="使用Function对象来完成"></a>使用Function对象来完成</h4><p>它的典型应用就是在jQuery中的AJAX方法下的success等对于返回数据data的解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var json=&apos;&#123;&quot;name&quot;:&quot;CJ&quot;,&quot;age&quot;:18&#125;&apos;;</div><div class="line">data =(new Function(&quot;&quot;, &quot;return &quot; + json))();</div></pre></td></tr></table></figure></p>
<p>此时的data就是一个会解析成一个 json对象了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs学习笔记——Events事件驱动]]></title>
      <url>http://yoursite.com/2016/08/12/NodeJs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Events%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h2 id="利用events事件驱动实现数据解析"><a href="#利用events事件驱动实现数据解析" class="headerlink" title="利用events事件驱动实现数据解析"></a>利用events事件驱动实现数据解析</h2><blockquote>
<p>Events–”订阅/发布”模式</p>
<p>get-&gt;post-&gt;cookie-&gt;session-&gt;业务逻辑-&gt;写回session-&gt; 响应结束</p>
</blockquote>
<p>如何使用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const EventEmitter=require(&apos;events&apos;).EventEmitter;//引入模块</div><div class="line">var E=new EventEmitter();//实例化</div><div class="line">E.emit(&apos;msg&apos;)//发布</div><div class="line"></div><div class="line">E.on(&apos;msg&apos;,function()&#123;  	//addListener 订阅</div><div class="line">	//code</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="首先引入模块"><a href="#首先引入模块" class="headerlink" title="首先引入模块"></a>首先引入模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const qs=require(&apos;querystring&apos;);</div><div class="line">const urlLib=require(&apos;url&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line">const EventEmitter=require(&apos;events&apos;).EventEmitter;</div><div class="line">const util=require(&apos;util&apos;)</div><div class="line">var E=new EventEmitter();</div></pre></td></tr></table></figure>
<h4 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">    //发射get，post事件</div><div class="line">    E.emit(&apos;get&apos;,req,res);</div><div class="line">    E.emit(&apos;post&apos;,req,res);</div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure>
<h4 id="为GET注册事件监听-E-emit-‘get’-req-res"><a href="#为GET注册事件监听-E-emit-‘get’-req-res" class="headerlink" title="为GET注册事件监听(E.emit(‘get’,req,res);)"></a>为GET注册事件监听(E.emit(‘get’,req,res);)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;get&apos;, function (req, res) &#123;</div><div class="line">    req.url=urlLib.parse(req.url,true).pathname;</div><div class="line">    req.get=urlLib.parse(req.url,true).query;</div><div class="line">    //发射cookie事件</div><div class="line">    E.emit(&apos;cookie&apos;,req,res);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="POST事件监听-E-emit-‘post’-req-res"><a href="#POST事件监听-E-emit-‘post’-req-res" class="headerlink" title="POST事件监听(E.emit(‘post’,req,res);)"></a>POST事件监听(E.emit(‘post’,req,res);)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">E.emit(&apos;post&apos;, function (req, res) &#123;</div><div class="line">    var str=&quot;&quot;;</div><div class="line">    req.on(&apos;data&apos;, function (chunk) &#123;</div><div class="line">        str+=chunk;</div><div class="line">    &#125;);</div><div class="line">    req.on(&apos;end&apos;, function () &#123;</div><div class="line">        req.post=qs.parse(str);</div><div class="line">        //发射cookie事件</div><div class="line">        E.emit(&apos;cookie&apos;,req,res);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;cookie&apos;, function (req, res) &#123;</div><div class="line">    //格式化cookie为&#123;a:1;b:2&#125;</div><div class="line">    req.cookie=qs.parse(req.headers.cookie,&apos;; &apos;);</div><div class="line">    //发射session事件</div><div class="line">    E.emit(&apos;session&apos;,req,res);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;session&apos;, function (req, res) &#123;</div><div class="line">    if(!req.cookie.sessid)&#123;</div><div class="line">        //添加sessid为cookie并赋值随机数</div><div class="line">        req.cookie.sessid=Date.now()+Math.random();</div><div class="line">    &#125;</div><div class="line">    //发射readSession事件</div><div class="line">    E.emit(&apos;readSession&apos;,req,res);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="readSession"><a href="#readSession" class="headerlink" title="readSession"></a>readSession</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;readSession&apos;, function (req, res) &#123;</div><div class="line">    fs.readFile(&apos;session/&apos;+req.cookie.sessid, function (err, data) &#123;</div><div class="line">        if(err)&#123;</div><div class="line">            req.session=&#123;&#125;;</div><div class="line">        &#125;else&#123;</div><div class="line">            req.session=JSON.parse(data.toString());</div><div class="line">        &#125;</div><div class="line">        //发布 业务 事件</div><div class="line">        E.emit(&apos;do&apos;,req,res);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="do"><a href="#do" class="headerlink" title="do"></a>do</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;do&apos;, function (req, res) &#123;</div><div class="line">    //设置访问次数</div><div class="line">    if(req.session.visite)&#123;</div><div class="line">        req.session.visite++;</div><div class="line">    &#125;else&#123;</div><div class="line">        req.session.visite=1;</div><div class="line">    &#125;</div><div class="line">    console.log(&apos;访问了&apos;+req.session.visite+&quot;次&quot;);</div><div class="line">    //E.emit()如果有人监听了，返回true，如果没有人监听，返回false</div><div class="line">    var b= E.emit(req.url,req,res);</div><div class="line">    if(b==false)&#123;</div><div class="line">        E.emit(&apos;read-file&apos;,req,res);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="read-file"><a href="#read-file" class="headerlink" title="read-file"></a>read-file</h4><blockquote>
<p>b==false</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;read-file&apos;, function (req, res) &#123;</div><div class="line">    fs.readFile(&apos;www&apos;+req.url, function (err, data) &#123;</div><div class="line">        if(err)&#123;</div><div class="line">            res.writeHeader(&quot;404&quot;)</div><div class="line">        &#125;else&#123;</div><div class="line">            res.setHeader(&apos;content-type&apos;,&apos;text/html; charset=utf-8&apos;);</div><div class="line">            res.write(data);</div><div class="line">        &#125;</div><div class="line">        //业务处理完成，写入session</div><div class="line">        E.emit(&apos;writeSession&apos;,req,res);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>b==true</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;/news&apos;, function (req, res) &#123;</div><div class="line">    res.write(</div><div class="line">        JSON.stringify(&#123;data:[</div><div class="line">                &#123;title:&quot;标题1&quot;,desc:&quot;简介&quot;&#125;,</div><div class="line">                &#123;title:&quot;标题2&quot;,desc:&quot;简介&quot;&#125;,</div><div class="line">                &#123;title:&quot;标题3&quot;,desc:&quot;简介&quot;&#125;,</div><div class="line">                &#123;title:&quot;标题4&quot;,desc:&quot;简介&quot;&#125;</div><div class="line">            ]&#125;)</div><div class="line">    )</div><div class="line">    //业务处理完成，写入session</div><div class="line">    E.emit(&apos;writeSession&apos;,req,res);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="writeSession"><a href="#writeSession" class="headerlink" title="writeSession"></a>writeSession</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;writeSession&apos;, function (req, res) &#123;</div><div class="line">    fs.writeFile(&apos;session/&apos;+req.cookie.sessid,JSON.stringify(req.session), function (err) &#123;</div><div class="line">        if(err)&#123;</div><div class="line">            res.write(&quot;session写入失败&quot;)</div><div class="line">        &#125;else&#123;</div><div class="line">           // res.write(&quot;session写入成功&quot;)</div><div class="line">           //解析结束</div><div class="line">            E.emit(&apos;end&apos;,req,res);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="end"><a href="#end" class="headerlink" title="end"></a>end</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E.on(&apos;end&apos;, function (req, res) &#123;</div><div class="line">    console.log(&apos;数据解析完成&apos;);</div><div class="line">    res.end();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="events常用方法"><a href="#events常用方法" class="headerlink" title="events常用方法"></a>events常用方法</h4><p>EventEmitter.on(event, listener) 为指定事件注册一个监听器，接受一个字<br>符串 event 和一个回调函数 listener。</p>
<p>EventEmitter.emit(event, [arg1], [arg2], […]) 发射 event 事件，传<br>递若干可选参数到事件监听器的参数表。</p>
<p>EventEmitter.once(event, listener) 为指定事件注册一个单次监听器，即<br>监听器最多只会触发一次，触发后立刻解除该监听器。</p>
<p>EventEmitter.removeListener(event, listener) 移除指定事件的某个监听<br>器，listener 必须是该事件已经注册过的监听器。</p>
<p>EventEmitter.removeAllListeners([event]) 移除所有事件的所有监听器，<br>如果指定 event，则移除指定事件的所有监听器。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs学习笔记-—简单登录]]></title>
      <url>http://yoursite.com/2016/08/05/NodeJs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%80%94%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="实现简单登陆功能"><a href="#实现简单登陆功能" class="headerlink" title="实现简单登陆功能"></a>实现简单登陆功能</h3><blockquote>
<p>通过url与fs模块读取本地文件实现</p>
<h4 id="user-data文件内容："><a href="#user-data文件内容：" class="headerlink" title="user.data文件内容："></a>user.data文件内容：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;&quot;username&quot;:&quot;aaa&quot;,&quot;password&quot;:&quot;aaa&quot;&#125;,&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125;]</div></pre></td></tr></table></figure>
<p>通过fs模块读取user.data文件，进行登陆验证，若不存在用户，则写入此条用户</p>
</blockquote>
<p>server.js代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">var http=require(&quot;http&quot;);</div><div class="line">var fs=require(&quot;fs&quot;);</div><div class="line">var urlLib=require(&quot;url&quot;);</div><div class="line">var qs=require(&quot;querystring&quot;);</div><div class="line"></div><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">    var url=&quot;&quot;;</div><div class="line">    var str=&quot;&quot;;</div><div class="line">    //获取get数据</div><div class="line">    url=urlLib.parse(req.url).pathname;</div><div class="line">    req.get=urlLib.parse(req.url).query;</div><div class="line">    //获取post数据</div><div class="line">    req.on(&quot;data&quot;,function(chunk)&#123;</div><div class="line">        str+=chunk;</div><div class="line">        console.log(str);</div><div class="line">    &#125;);</div><div class="line">    req.on(&quot;end&quot;,function()&#123;</div><div class="line">        req.post=qs.parse(str);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    if(url==&apos;/login&apos;)&#123;//若为登陆请求</div><div class="line">    	//读取user.data文件</div><div class="line">        fs.readFile(&quot;user.data&quot;,function(err,data)&#123;</div><div class="line">            if(err)&#123;</div><div class="line">                console.log(&quot;读取失败&quot;);</div><div class="line">            &#125;else&#123;</div><div class="line">                var userLib=&quot;&quot;;</div><div class="line">                var arr=[];</div><div class="line">                if(data != &quot;&quot;)&#123;</div><div class="line">                  //将user.data文件内容的 JSON 字符串转换成对象</div><div class="line">                    userLib=JSON.parse(data);</div><div class="line">                    //遍历userLib</div><div class="line">                    userLib.forEach(function(item,index)&#123;</div><div class="line">                        if(item.username == req.post.username)&#123;</div><div class="line">                            if(item.password == req.post.password)&#123;</div><div class="line">                                res.write(&apos;&#123;err:0,msg:&quot;登陆成功&quot;&#125;&apos;)</div><div class="line">                            &#125;else&#123;</div><div class="line">                                res.write(&apos;&#123;err:1,msg:&quot;密码错误&quot;&#125;&apos;)</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        //将用户名存入数组</div><div class="line">                        arr.push(item.username);</div><div class="line">                    &#125;)</div><div class="line">                &#125;</div><div class="line">               // console.log(arr.length)</div><div class="line">               //目前愚钝的我只想到了这个笨方法</div><div class="line">               //将user.data取出的用户名存入数组，然后通过post用户名去indexOf去验证是否存在用户名</div><div class="line">                if(arr.length &gt; 0)&#123;</div><div class="line">                	//indexOf(post用户名)</div><div class="line">                    if(arr.toString().indexOf(req.post.username) == -1)&#123;</div><div class="line">                        if(req.post.username != &quot;&quot;)&#123;</div><div class="line">                        	//push进userLib</div><div class="line">                            userLib.push(req.post);</div><div class="line">                            console.log(userLib);</div><div class="line">                            //如果直接写入userLib，则user.data内容会变为[Object,Object]，所以需要JSON.stringify</div><div class="line">                            fs.writeFile(&quot;user.data&quot;,JSON.stringify(userLib),function(err)&#123;</div><div class="line">                                if(err)&#123;</div><div class="line">                                	console.log(err);</div><div class="line">                                &#125;else&#123;</div><div class="line">                                    console.log(&quot;写入成功&quot;)</div><div class="line">                                &#125;</div><div class="line"></div><div class="line">                            &#125;)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;else&#123;</div><div class="line">                	//若user.data文件为空</div><div class="line">                    fs.writeFile(&quot;user.data&quot;,&quot;[&quot;+JSON.stringify(req.post)+&quot;]&quot;,function(err)&#123;</div><div class="line">                        if(err)&#123;</div><div class="line">                        	console.log(err);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            console.log(&quot;写入成功&quot;)</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            res.end();</div><div class="line">        &#125;)</div><div class="line">    &#125;else&#123;</div><div class="line">        fs.readFile(&quot;www&quot;+url,function(err,data)&#123;</div><div class="line">            if(err)&#123;</div><div class="line">                res.write(&quot;404&quot;);</div><div class="line">            &#125;else&#123;</div><div class="line">                res.write(data);</div><div class="line">            &#125;</div><div class="line">            res.end();</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure></p>
<p>html代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;input-group&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;username&quot; aria-describedby=&quot;sizing-addon2&quot; id=&quot;username&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;input-group&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;password&quot; aria-describedby=&quot;sizing-addon2&quot; id=&quot;password&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot; id=&quot;btn&quot;&gt;Submit&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line">   $(function()&#123;</div><div class="line">       $(&quot;#btn&quot;).on(&apos;click&apos;,function()&#123;</div><div class="line">           $.ajax(&#123;</div><div class="line">               type : &quot;POST&quot;,  //提交方式</div><div class="line">               url : &quot;login&quot;,//路径</div><div class="line">               data : &#123;</div><div class="line">                   &quot;username&quot; : $(&quot;#username&quot;).val(),</div><div class="line">                   &quot;password&quot; : $(&quot;#password&quot;).val()</div><div class="line">               &#125;,</div><div class="line">               success : function(result) &#123;</div><div class="line">                   if(result != &quot;&quot;)&#123;</div><div class="line">                       var json=eval(&apos;(&apos;+result+&apos;)&apos;);</div><div class="line"></div><div class="line">                       if(json.err)&#123;</div><div class="line">                           alert(json.msg);</div><div class="line">                       &#125;else&#123;</div><div class="line">                           alert(json.msg);</div><div class="line">                       &#125;</div><div class="line">                   &#125;else&#123;</div><div class="line">                       console.log(&quot;404&quot;)</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">       &#125;)</div><div class="line">   &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="又通过angular实现了一次前台功能"><a href="#又通过angular实现了一次前台功能" class="headerlink" title="又通过angular实现了一次前台功能"></a>又通过angular实现了一次前台功能</h3><p>html代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body ng-app=&quot;app&quot;&gt;</div><div class="line">&lt;div ng-controller=&quot;login&quot;&gt;</div><div class="line">    &lt;div class=&quot;input-group&quot;&gt;</div><div class="line">        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;username&quot; aria-describedby=&quot;sizing-addon2&quot; id=&quot;username&quot; ng-model=&quot;user.username&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;input-group&quot;&gt;</div><div class="line">        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;password&quot; aria-describedby=&quot;sizing-addon2&quot; id=&quot;password&quot; ng-model=&quot;user.password&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;button&quot; ng-click=&quot;login()&quot;&gt;登录&lt;/div&gt;</div><div class="line">    &lt;div ng-show=&quot;errormsg.length &gt; 0&quot; ng-bind=&quot;errormsg&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>angularJs代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">    var app = angular.module(&quot;app&quot;, [], function ($httpProvider) &#123;</div><div class="line">        //修改angular http请求头，</div><div class="line">        $httpProvider.defaults.headers.post[&quot;Content-Type&quot;] = &quot;application/x-www-form-urlencoded;charset=utf-8&quot;;</div><div class="line">        $httpProvider.defaults.headers.put[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=utf-8&apos;;</div><div class="line">        var param = function (obj) &#123;</div><div class="line">            var query = &quot;&quot;, name, value, fullSubName, subName, subValue, innerObj, i;</div><div class="line">            for (name in obj) &#123;</div><div class="line">                value = obj[name];</div><div class="line">                if (value instanceof Array) &#123;</div><div class="line">                    for (i = 0; i &lt; value.length; ++i) &#123;</div><div class="line">                        subValue = value[i];</div><div class="line">                        fullSubName = name + &quot;[&quot; + i + &quot;]&quot;;</div><div class="line">                        innerObj = &#123;&#125;;</div><div class="line">                        innerObj[fullSubName] = subValue;</div><div class="line">                        query += param(innerObj) + &quot;&amp;&quot;;</div><div class="line">                    &#125;</div><div class="line">                &#125; else if (value instanceof Object) &#123;</div><div class="line">                    for (subName in value) &#123;</div><div class="line">                        subValue = value[subName];</div><div class="line">                        fullSubName = name + &quot;[&quot; + subName + &quot;]&quot;;</div><div class="line">                        innerObj = &#123;&#125;;</div><div class="line">                        innerObj[fullSubName] = subValue;</div><div class="line">                        query += param(innerObj) + &quot;&amp;&quot;;</div><div class="line">                    &#125;</div><div class="line">                &#125; else if (value !== undefined &amp;&amp; value !== null) &#123;</div><div class="line">                    query += encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(value) + &quot;&amp;&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return query.length ? query.substr(0, query.length - 1) : query;</div><div class="line">        &#125;;</div><div class="line">        $httpProvider.defaults.transformRequest = [function (data) &#123;</div><div class="line">            return angular.isObject(data) &amp;&amp; String(data) !== &quot;[object File]&quot; ? param(data) : data;</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    app.controller(&quot;login&quot;, function ($scope, $http) &#123;</div><div class="line">        $scope.user=&#123;username:&apos;&apos;,password:&apos;&apos;&#125;;</div><div class="line">        $scope.errormsg=&quot;&quot;;</div><div class="line">         //login控制器</div><div class="line">        $scope.login=function(data)&#123;</div><div class="line">            $http(&#123;</div><div class="line">                method : &apos;POST&apos;,</div><div class="line">                url : &apos;/login&apos;,</div><div class="line">                data: $scope.user</div><div class="line">            &#125;).success(function(data, status, headers, config) &#123;</div><div class="line">                    console.log(data)</div><div class="line">                    //此处data会报错</div><div class="line">                    //因为server.js里写入的res.write(&apos;&#123;err:0,msg:&quot;登陆成功&quot;&#125;&apos;)</div><div class="line">                    //这里的格式问题，如果写个字符串就ok</div><div class="line">                    //angular中这个问题还在研究中</div><div class="line"></div><div class="line">            &#125;).error(function(data, status, headers, config) &#123;</div><div class="line"></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs学习笔记——基础02]]></title>
      <url>http://yoursite.com/2016/08/05/NodeJs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%8002/</url>
      <content type="html"><![CDATA[<h2 id="数据解析服务器"><a href="#数据解析服务器" class="headerlink" title="数据解析服务器"></a>数据解析服务器</h2><h3 id="获取GET请求"><a href="#获取GET请求" class="headerlink" title="获取GET请求"></a>获取GET请求</h3><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。<br>node.js中url模块中的parse函数提供了这个功能。</p>
<p><code>url.parse(req.url)</code>将URL字符串转换成对象并返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url.parse(urlStr, [parseQueryString], [slashesDenoteHost])</div></pre></td></tr></table></figure>
<p>接收参数：</p>
<p>urlStr ——url字符串</p>
<p>parseQueryString    ——为true时将使用查询模块分析查询字符串，默认为false</p>
<p>slashesDenoteHost               </p>
<p>默认为false，//foo/bar ——形式的字符串将被解释成 { pathname: ‘//foo/bar’ }</p>
<p>如果设置成true，//foo/bar ——形式的字符串将被解释成  { host: ‘foo’, pathname: ‘/bar’ }</p>
<p>例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var url = require(&apos;url&apos;);</div><div class="line"> var a = url.parse(&apos;http://example.com:8080/one?a=index&amp;t=article&amp;m=default&apos;);</div><div class="line"> console.log(a);</div><div class="line">  </div><div class="line"> //输出结果：</div><div class="line">&#123; </div><div class="line">     protocol : &apos;http&apos; ,</div><div class="line">     auth : null ,</div><div class="line">     host : &apos;example.com:8080&apos; ,</div><div class="line">     port : &apos;8080&apos; ,</div><div class="line">     hostname : &apos;example.com&apos; ,</div><div class="line">     hash : null ,</div><div class="line">     search : &apos;?a=index&amp;t=article&amp;m=default&apos;,</div><div class="line">     query : &apos;a=index&amp;t=article&amp;m=default&apos;,</div><div class="line">     pathname : &apos;/one&apos;,</div><div class="line">     path : &apos;/one?a=index&amp;t=article&amp;m=default&apos;,</div><div class="line">     href : &apos;http://example.com:8080/one?a=index&amp;t=article&amp;m=default&apos;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>获取页面提交的username</p>
<p>假设url为localhost:8081/user?username=admin&amp;password=admin;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const urlLib=require(&apos;url&apos;);</div><div class="line"></div><div class="line">http.createServer(function(req,res)&#123;</div><div class="line">   </div><div class="line">    var url=urlLib.parse(req.url,true).pathname;</div><div class="line">    req.get=urlLib.parse(req.url,true).query;</div><div class="line"></div><div class="line">    //req.get.username;</div><div class="line"></div><div class="line">    console.log(&apos;您的用户名是&apos;+req.get.username);//admin</div><div class="line">    console.log(&apos;您请求的地址是&apos;+url);//  /user</div><div class="line">&#125;).listen(8081);</div></pre></td></tr></table></figure>
<h3 id="获取POST请求"><a href="#获取POST请求" class="headerlink" title="获取POST请求"></a>获取POST请求</h3><p>POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。<br>比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。</p>
<blockquote>
<p>假设请求post请求url为 /user ,data{“username”:”admin”,”password”:”admin”}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line">var querystring = require(&apos;querystring&apos;);</div><div class="line">var util = require(&apos;util&apos;);</div><div class="line"></div><div class="line">http.createServer(function(req, res)&#123;</div><div class="line">    var post = &apos;&apos;;     //定义了一个post变量，用于暂存请求体的信息</div><div class="line"></div><div class="line">    req.on(&apos;data&apos;, function(chunk)&#123;    //通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</div><div class="line">        post += chunk;  </div><div class="line">        //post=username=admin&amp;password=admin</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    req.on(&apos;end&apos;, function()&#123;    //在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</div><div class="line">        post = querystring.parse(post);</div><div class="line">        //post=&#123; username: &apos;admin&apos;, password: &apos;admin&apos; &#125;</div><div class="line">        res.end(util.inspect(post));</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(3000);</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h3><p>直接看代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const querystring=require(&apos;querystring&apos;);</div><div class="line"></div><div class="line">http.createServer(function(req,res)&#123;</div><div class="line"></div><div class="line">    res.writeHeader(200,&#123;&apos;Set-Cookie&apos;:&apos;user=def&apos;&#125;);</div><div class="line">    res.end();</div><div class="line">    </div><div class="line">&#125;).listen(8081);</div></pre></td></tr></table></figure></p>
<p>一个set-cookie头只能设置一个cookie，要设多个cookie需要设置多set-cookie头。<br>可以通过这种形式来设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res.setHeader(&quot;Set-Cookie&quot;, [&apos;a=000&apos;, &apos;t=1111&apos;, &apos;w=2222&apos;]);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA['开发nodejs模块并发布到npm的简单示例']]></title>
      <url>http://yoursite.com/2016/08/04/%E5%BC%80%E5%8F%91nodejs%E6%A8%A1%E5%9D%97%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h3 id="建立一个工作目录！"><a href="#建立一个工作目录！" class="headerlink" title="建立一个工作目录！"></a>建立一个工作目录！</h3><p>我建立在mrshen/目录下。</p>
<h4 id="新建一个js文件"><a href="#新建一个js文件" class="headerlink" title="新建一个js文件"></a>新建一个js文件</h4><p>新建index.js ,输入如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function hello(name)&#123;</div><div class="line">  console.log(&quot;hello&quot;+ name);</div><div class="line">&#125;</div><div class="line">exports.hello=hello;</div></pre></td></tr></table></figure>
<p>注意： </p>
<p><code>exports.hello=hello</code> 这句是关键！使用<code>exports</code>将你的<code>hello</code>函数暴漏出去！不懂的可以百度CommonJs规范！</p>
<p>接下来我们在目录里简历一个test.js的文件！ 代码如下</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var h=require(&apos;./index&apos;);</div><div class="line">h.hello(&apos;Jarrick&apos;);</div></pre></td></tr></table></figure>
<p>可以看到b.js的文件只有两行！</p>
<p>第一行首先使用<code>require(&#39;./a&#39;)</code>导入刚才的a模块，然后我们调用模块中的hello方法！</p>
<p>一切完毕！虽然两个文件加起来只有5行代码，但是足够我们演示我们所要的了！。</p>
<p>让我们用node执行一下，同样很简单，执行代码也只有两句！输出的结果为<code>helloJarrick</code>。</p>
<p><img src="http://images.cnblogs.com/cnblogs_com/mz121star/QQ%E6%88%AA%E5%9B%BE20121115164614.jpg" alt="image"></p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p> 接下来要将我们开发的模块传到npm上了（npm是一个nodejs模块大菜市！）</p>
<p> 我们在cmd中首先进入我们js的工作目录</p>
<h6 id="执行：npm-init"><a href="#执行：npm-init" class="headerlink" title="执行：npm init"></a>执行：<code>npm init</code></h6><p>会提示你输入name,version,descripttion,等信息，其中name就是你的插件名字，与文件名无关。</p>
<p>该命令可以帮助我们建立一个发布到npm所必须的 <code>package.json</code><br>文件，该文件包含了你所建立模块的相关信息，你可以按照它的提示一步步输入即可，最后会在你的目录中发先一个 package.json的文件，我所建立完成之后的内容大概如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;mrshen&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;test&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;repository&quot;: &quot;&quot;,</div><div class="line">  &quot;keywords&quot;: [</div><div class="line">    &quot;mcore&quot;</div><div class="line">  ],</div><div class="line">  &quot;author&quot;: &quot;Mrshen&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;</div><div class="line">  ｝</div></pre></td></tr></table></figure>
<p>如果后续修改要同步，那么版本号version一定要修改,否则不会执行提交。</p>
<h4 id="登录npm账户"><a href="#登录npm账户" class="headerlink" title="登录npm账户"></a>登录npm账户</h4><p>发布前首先使用npm adduser命令增加账户即可！</p>
<p>在文件所在目录打开cmd，输入<code>npm adduser</code>会让你输入你的npm用户名，密码及邮箱</p>
<p>待一切创建成功！</p>
<p>执行<code>npm publish</code></p>
<p>你就可以到npm你的主页去寻找到你的模块了</p>
<h4 id="install-所发布的包"><a href="#install-所发布的包" class="headerlink" title="install 所发布的包"></a>install 所发布的包</h4><p>使用时，只要在你的命令行中输入 </p>
<p>npm install mrshen</p>
<p>即可安装该模块了！</p>
<p>安装后我们尝试使用一下，在命令行中输入node ，然后用<code>require(&quot;mrshen&quot;)</code>即可导入该模块！会在屏幕立即显示出<code>helloJarrick</code>的消息！</p>
<h4 id="在npm上删除包"><a href="#在npm上删除包" class="headerlink" title="在npm上删除包"></a>在npm上删除包</h4><p>如果想删除所发布的包，输入npm unpublish 即可， </p>
<blockquote>
<p>npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm unpublish //提示拒绝删除</div><div class="line">npm unpublish --force    //强制删除</div><div class="line">npm unpublish 包名 --force  //彻底删除包</div></pre></td></tr></table></figure></version></package></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA['ES6的箭头函数']]></title>
      <url>http://yoursite.com/2016/07/25/ES6%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>ES6允许使用“箭头”（=&gt;）定义函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var f = v =&gt; v;</div></pre></td></tr></table></figure>
<p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var f = function(v) &#123;</div><div class="line">  return v;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function show()&#123;</div><div class="line">	return 1;</div><div class="line">&#125;</div><div class="line">show();</div><div class="line"></div><div class="line">function show(a)&#123;</div><div class="line">	return a;</div><div class="line">&#125;</div><div class="line">show(1);</div><div class="line"></div><div class="line">//等同于</div><div class="line"></div><div class="line">var show=a=&gt;a;  -&gt; function show(a)&#123;return a&#125;;</div><div class="line">var show=(a)=&gt;a;  -&gt; function show(a)&#123;return a&#125;;</div><div class="line">var show=()=&gt;1;   -&gt; function show()&#123;return 1&#125;;</div><div class="line"></div><div class="line">var f=() =&gt; 5;</div><div class="line">//等同于</div><div class="line">var f=function()&#123;return 5&#125;;</div><div class="line"></div><div class="line">var sum(num1, num2) =&gt; num1 + num2;</div><div class="line">//等同于</div><div class="line">var sum=function(num1, num2)&#123;</div><div class="line">    return num1 + num2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回,由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var getTempItem = id =&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h4><p>箭头函数有几个使用注意点。</p>
<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>
<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</p>
<p>（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。</p>
<p>上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">  setTimeout(() =&gt; &#123;</div><div class="line">    console.log(&apos;id:&apos;, this.id);</div><div class="line">  &#125;, 100);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var id = 21;</div><div class="line"></div><div class="line">foo.call(&#123; id: 42 &#125;);</div><div class="line">// id: 42</div></pre></td></tr></table></figure></p>
<p>上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到100毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA['ES6的Class']]></title>
      <url>http://yoursite.com/2016/07/25/ES6%E7%9A%84Class/</url>
      <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>JavaScript语言的传统方法是通过构造函数，定义并生成新对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function Point(x, y)&#123;</div><div class="line">    this.x=x;</div><div class="line">    this.y=y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Point.prototype.toString=function()&#123;</div><div class="line">    return &apos;(&apos;+ this.x + &apos;,&apos; + this.y + &apos;)&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var p = new Point(1, 2);</div></pre></td></tr></table></figure></p>
<p>上面的代码用ES6的“类”改写，就是下面这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Point&#123;</div><div class="line">    contructor(x, y)&#123;</div><div class="line">        this.x = x;</div><div class="line">        this.y = y;</div><div class="line">    &#125;</div><div class="line">    toString()&#123;</div><div class="line">        return &apos;(&apos;+ this.x + &apos;,&apos; + this.y + &apos;)&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。</p>
<p><code>Point</code>类除了构造方法，还定义了一个<code>toString</code>方法。注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p>
<p>ES6的类，完全可以看作构造函数的另一种写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">typeof Point // &quot;function&quot;</div><div class="line">Point === Point.prototype.constructor // true</div></pre></td></tr></table></figure>
<p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。<br>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class bar&#123;</div><div class="line">    doStuff()&#123;</div><div class="line">        console.log(&apos;stuff&apos;)&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b=new bar();</div><div class="line">b.doStuff()//stuff</div></pre></td></tr></table></figure></p>
<p>构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  constructor()&#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString()&#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toValue()&#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 等同于</div><div class="line"></div><div class="line">Point.prototype = &#123;</div><div class="line">  toString()&#123;&#125;,</div><div class="line">  toValue()&#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在类的实例上面调用方法，其实就是调用原型上的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class B &#123;&#125;</div><div class="line">let b = new B();</div><div class="line"></div><div class="line">b.constructor === B.prototype.constructor // true</div></pre></td></tr></table></figure></p>
<p>上面代码中，b是B类的实例，它的<code>constructor</code>方法就是B类原型的<code>constructor</code>方法。</p>
<h4 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a>constructor方法</h4><p><code>constructor</code>方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">constructor() &#123;&#125;</div></pre></td></tr></table></figure></p>
<p><code>constructor</code>方法默认返回实例对象（即<code>this</code>），完全可以指定返回另外一个对象。</p>
<p>类的构造函数，不使用new是没法调用的，会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Foo &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    return Object.create(null);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo()</div><div class="line">// TypeError: Class constructor Foo cannot be invoked without &apos;new&apos;</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>推荐用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function Queue(contents = []) &#123;</div><div class="line">  this._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = function() &#123;</div><div class="line">  const value = this._queue[0];</div><div class="line">  this._queue.splice(0, 1);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class Queue &#123;</div><div class="line">  constructor(contents = []) &#123;</div><div class="line">    this._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    const value = this._queue[0];</div><div class="line">    this._queue.splice(0, 1);</div><div class="line">    return value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA['ES6的let和const']]></title>
      <url>http://yoursite.com/2016/07/25/ES6%E7%9A%84let%E5%92%8Cconst/</url>
      <content type="html"><![CDATA[<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><p>ES6新增了<code>let</code>命令,用来声明变量，但其只在<code>let</code>命令所在的代码块中有效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> let a=10;</div><div class="line"> var b=20;</div><div class="line">&#125;</div><div class="line">console.log(a)//ReferenceError: a is not defined</div><div class="line">console.log(b)//20</div></pre></td></tr></table></figure></p>
<p>上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。</p>
<p><code>for</code>循环的计数器，就很合适使用let命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for (let i = 0; i &lt; arr.length; i++) &#123;&#125;</div><div class="line"></div><div class="line">console.log(i);</div><div class="line">//ReferenceError: i is not defined</div></pre></td></tr></table></figure></p>
<h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><p><code>let</code>不像<code>var</code>那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.log(foo); // 输出undefined</div><div class="line">console.log(bar); // 报错ReferenceError</div><div class="line"></div><div class="line">var foo = 2;</div><div class="line">let bar = 2;</div></pre></td></tr></table></figure></p>
<p>变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经存在了，但是没有值，所以会输出undefined。变量bar用let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。</p>
<h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var tmp = 123;</div><div class="line"></div><div class="line">if (true) &#123;</div><div class="line">  tmp = &apos;abc&apos;; // ReferenceError</div><div class="line">  let tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p>
<p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>
<p>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）。</p>
<h4 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h4><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 报错</div><div class="line">function () &#123;</div><div class="line">  let a = 10;</div><div class="line">  var a = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 报错</div><div class="line">function () &#123;</div><div class="line">  let a = 10;</div><div class="line">  let a = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因此，不能在函数内部重新声明参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function func(arg) &#123;</div><div class="line">  let arg; // 报错</div><div class="line">&#125;</div><div class="line"></div><div class="line">function func(arg) &#123;</div><div class="line">  &#123;</div><div class="line">    let arg; // 不报错</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>let实际上为JavaScript新增了块级作用域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function f1() &#123;</div><div class="line">  let n = 5;</div><div class="line">  if (true) &#123;</div><div class="line">    let n = 10;</div><div class="line">  &#125;</div><div class="line">  console.log(n); // 5</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的函数有两个代码块，都声明了变量n，运行后输出5。这表示外层代码块不受内层代码块的影响。如果使用var定义变量n，最后输出的值就是10。</p>
<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><p><code>const</code> 声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const PI = 3.1415;</div><div class="line">PI // 3.1415</div><div class="line"></div><div class="line">PI = 3;</div><div class="line">// TypeError: Assignment to constant variable.</div></pre></td></tr></table></figure>
<p>上面代码表明改变常量的值会报错。</p>
<p>const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const foo;</div><div class="line">// SyntaxError: Missing initializer in const declaration</div></pre></td></tr></table></figure>
<p>上面代码表示，对于const来说，只声明不赋值，就会报错。</p>
<p>const的作用域与let命令相同：只在声明所在的块级作用域内有效,一样不可重复声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  const MAX = 5;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MAX // Uncaught ReferenceError: MAX is not defined</div></pre></td></tr></table></figure></p>
<p>下面是另一个例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const a = [];</div><div class="line">a.push(&apos;Hello&apos;); // 可执行</div><div class="line">a.length = 0;    // 可执行</div><div class="line">a = [&apos;Dave&apos;];    // 报错</div></pre></td></tr></table></figure></p>
<p>上面代码中，常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。</p>
<p>var命令存在变量提升效用，let命令没有这个问题。</p>
<p>所以，建议不再使用var命令，而是使用let命令取代。</p>
<p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">var a = 1, b = 2, c = 3;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = 1;</div><div class="line">const b = 2;</div><div class="line">const c = 3;</div><div class="line"></div><div class="line">// best</div><div class="line">const [a, b, c] = [1, 2, 3];</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs学习笔记——基础01]]></title>
      <url>http://yoursite.com/2016/07/25/NodeJs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%8001/</url>
      <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><h5 id="在node中，以下两个东西不能用："><a href="#在node中，以下两个东西不能用：" class="headerlink" title="在node中，以下两个东西不能用："></a>在node中，以下两个东西不能用：</h5><ol>
<li>DOM    document</li>
<li>BOM    window</li>
</ol>
<h5 id="魔术变量-全局提供的东西-："><a href="#魔术变量-全局提供的东西-：" class="headerlink" title="魔术变量(全局提供的东西)："></a>魔术变量(全局提供的东西)：</h5><blockquote>
<p>node中自己封装一个 定时器(setInterval,setTimeout)</p>
</blockquote>
<h5 id="node-内置方法"><a href="#node-内置方法" class="headerlink" title="node 内置方法"></a>node 内置方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(__dirname);//获取当前路径</div><div class="line">console.log(__filename);//获取包含本身文件名的路径</div></pre></td></tr></table></figure>
<h5 id="编写一个http服务器"><a href="#编写一个http服务器" class="headerlink" title="编写一个http服务器"></a>编写一个http服务器</h5><blockquote>
<p>1,引入模块</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div></pre></td></tr></table></figure>
<blockquote>
<p>2,建服务器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http.createServer(function()&#123;&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>3,设置端口号</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http.listen(8080)//8080未被占用的情况下</div></pre></td></tr></table></figure>
<blockquote>
<p>4,通信</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function(request,response)&#123;&#125;</div><div class="line"></div><div class="line">    request.url;// 客户端地址</div><div class="line">    response.write(&apos;well&apos;);//输出内容，最好是字符串</div><div class="line">    response.end();//结束请求</div></pre></td></tr></table></figure>
<blockquote>
<p>最终代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line"></div><div class="line">var httpObj=http.createServer(function(req,res)&#123;</div><div class="line">    //req 请求 客户端-&gt;服务器</div><div class="line">    //res 响应 服务器-&gt;客户端</div><div class="line">    console.log(&apos;有人来访问了&apos;+req.url);//req.url获取访问者进来的路径</div><div class="line">    res.write(&apos;hello node&apos;);</div><div class="line">    res.end();//结束了</div><div class="line">&#125;)</div><div class="line"></div><div class="line">httpObj.listen(8080);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="通过http-fs实现"><a href="#通过http-fs实现" class="headerlink" title="通过http+fs实现"></a>通过http+fs实现</h4><p>fs通用方法</p>
<blockquote>
<p>fs.readFile读文件</p>
<p>fs.exists是否存在</p>
<p>fs.stat查看状态</p>
<p>fs.rename重命名</p>
</blockquote>
<p>文件夹</p>
<blockquote>
<p>fs.rmdir新建文件夹</p>
<p>fs.rmdir删除文件夹</p>
</blockquote>
<p>文件</p>
<blockquote>
<p>fs.writeFile新建文件</p>
<p>fs.appendFile追加内容</p>
<p>fs.unlink删除文件</p>
</blockquote>
<p>fs读取内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.readFile(路径，[编码],function(err, data)&#123;//异步过程</div><div class="line">    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>具体实现方法：</p>
<p>首先在项目文件夹内录新建<code>www</code>文件夹并创建页面<code>index.html</code>,<code>a.html</code>,<code>b.html</code>;</p>
<blockquote>
<p>页面内容：</p>
</blockquote>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/a&quot;&gt;A页面&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/b&quot;&gt;B页面&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;h3&gt;这是首页&lt;/h3&gt;</div></pre></td></tr></table></figure></p>
<p>a.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/a&quot;&gt;A页面&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/b&quot;&gt;B页面&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;h3&gt;这是A页&lt;/h3&gt;</div></pre></td></tr></table></figure></p>
<p>b.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/a&quot;&gt;A页面&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;/b&quot;&gt;B页面&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;h3&gt;这是B页&lt;/h3&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在项目根目录创建server_fs.js</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">//建立服务</div><div class="line">http.createServer(function(req,res)&#123;</div><div class="line">    //console.log(&quot;有人来了&quot;+req.url)</div><div class="line">    var url=req.url==&apos;/&apos;?&apos;/index&apos;:req.url;</div><div class="line">    //验证请求的url，如果为localhost:8080则访问localhost:8080/index</div><div class="line"></div><div class="line">    fs.readFile(&apos;wwww&apos;+url+&apos;.html&apos;,function(err,data)&#123;//异步过程</div><div class="line">        if(err)&#123;</div><div class="line">            //console.log(&quot;404&quot;);</div><div class="line">            res.write(&apos;404&apos;)</div><div class="line">        &#125;else&#123;</div><div class="line">            //console.log(data);</div><div class="line">            res.write(data);</div><div class="line">        &#125;</div><div class="line">        res.end();//结束响应</div><div class="line">    &#125;)</div><div class="line">     </div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure>
<p>通过ES6箭头函数的实现方法稍作改动即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const http=require(&apos;http&apos;);</div><div class="line">const fs=require(&apos;fs&apos;);</div><div class="line"></div><div class="line">//建立服务</div><div class="line">http.createServer((req,res)=&gt;&#123;</div><div class="line">    console.log(&apos;有人来了:&apos;+req.url);</div><div class="line">    // wwww//</div><div class="line">    var url=req.url==&apos;/&apos;?&apos;/index&apos;:req.url;</div><div class="line">    console.log(&apos;wwww&apos;+url+&apos;.html&apos;);</div><div class="line">    fs.readFile(&apos;wwww&apos;+url+&apos;.html&apos;,(err,data) =&gt; &#123;</div><div class="line">        if(err)&#123;</div><div class="line">            //console.log(err);</div><div class="line">            res.write(&apos;404&apos;);</div><div class="line">        &#125;else&#123;</div><div class="line">            //console.log(data);</div><div class="line">            res.write(data);</div><div class="line">        &#125;</div><div class="line">        res.end();</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure></p>
<p>这样一个简单的萌新node功能就实现了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js命名空间]]></title>
      <url>http://yoursite.com/2016/07/19/js%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<h3 id="1-为什么要用js命名空间"><a href="#1-为什么要用js命名空间" class="headerlink" title="1.为什么要用js命名空间"></a>1.为什么要用js命名空间</h3><p>项目中，如果多个人为同一个页面写js的话，命名冲突就有可能发生，如果所有的函数都是全局的话，如下：</p>
<blockquote>
<p>a.js中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">com</span></span>()</div><div class="line">&#123;</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>b.js中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">com</span></span>()</div><div class="line">&#123;</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而且一个页面同时引用了这两个js文件，这样我们调用的时候会出问题，可能总是调用到第一个文件里面的函数了！</p>
<blockquote>
<p>如果我弄一个命名空间，这样a.js里面的函数在a空间中，b.js里面的函数在b命令空间中。</p>
</blockquote>
<p>调用的时候就可以如下调用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.com();</div><div class="line">b.com();</div></pre></td></tr></table></figure>
<h3 id="2-如何制造命名空间"><a href="#2-如何制造命名空间" class="headerlink" title="2.如何制造命名空间"></a>2.如何制造命名空间</h3><blockquote>
<p>其实就是利用js对象字面量这个语法来实现js的命名空间的</p>
</blockquote>
<p>接着上面的上面提出的这个问题，要想实现如下调用:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.com();</div><div class="line">b.com();</div></pre></td></tr></table></figure>
<p>可以用如下方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var  a=&#123;</div><div class="line">      com: <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        ..........</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var b=&#123;</div><div class="line">      com: <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        ..........</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面都是采用对象字面量的方法，定义了两个对象a和对象b是全局的,且两个对象里面都有一个com方法，没有变量，(我们知道js里面的对象可以拥有属性和方法)，可以看得到我们已经实现js的命令空间了。</p>
<p>例如：登录界面有一个login.js文件，他的命名空间为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var  BP=&#123;</div><div class="line">           login:&#123;</div><div class="line">                   ....</div><div class="line">              &#125;                                </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个表示全局对象BP里面有一个login对象，然后关于对登录界面的操作都在的属性和方法都要放在login对象里面，就是关于这个页面的操作在命名空间BP.login里面。BP便是项目名字，login表示本js的功能</p>
</blockquote>
<p>还有一种方法，通过注册window方法，<code>nameSpace.Register(&quot;BP.login&quot;)</code>，只需要在Resister这个函数里面动态的创建出BP对象和BP的子对象login</p>
<p>我们知道定义一个对象可以这样，<code>window[&#39;BP&#39;]={};  window.BP[&#39;login&#39;]={};</code>表示window对象有一个子对象BP，BP有一个子对象login。</p>
<p>下面就是采用这种方法来动态的拆分字符串，然后用上面这种方法动态创建对象的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var nameSpace = nameSpace || &#123;&#125;;</div><div class="line">(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  var global = window;</div><div class="line">  /**</div><div class="line">   * </div><div class="line">   * @param &#123;&#125; nsStr</div><div class="line">   * @<span class="built_in">return</span> &#123;&#125;</div><div class="line">   */</div><div class="line">  nameSpace.ns = <span class="keyword">function</span> (nsStr) &#123;</div><div class="line">    var parts = nsStr.split(<span class="string">"."</span>),</div><div class="line">    root = global,</div><div class="line">    max,</div><div class="line">    i;</div><div class="line">    <span class="keyword">for</span> (i = 0, max = parts.length ; i &lt; max ; i++) &#123;</div><div class="line">      //如果不存在，就创建一个属性</div><div class="line">      <span class="keyword">if</span> (typeof root[parts[i]] === <span class="string">"undefined"</span>) &#123;</div><div class="line">        root[parts[i]] = &#123;&#125;;</div><div class="line">      &#125;</div><div class="line">      root = root[parts[i]];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> root;</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h5 id="a-表示nameSpace定义成一个对象"><a href="#a-表示nameSpace定义成一个对象" class="headerlink" title="a.表示nameSpace定义成一个对象"></a>a.表示nameSpace定义成一个对象</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var nameSpace = nameSpace || &#123;&#125;;</div></pre></td></tr></table></figure>
<h5 id="b-匿名函数"><a href="#b-匿名函数" class="headerlink" title="b.//匿名函数"></a>b.//匿名函数</h5><p><font style="color:#f00">(</font>function(){</p>
<p>//code,运行的代码</p>
<p>}<font style="color:#f00">)</font><font style="color:rgb(0, 176, 80)">()</font>;</p>
<blockquote>
<p>注意：()在JavaScript中有两种含义：一是运算符；二是分隔符。</p>
</blockquote>
<p>上面匿名函数需要说明两点：</p>
<blockquote>
<p>红色括号里是一个匿名函数，红色括号代表分割，表示里面的函数是一个部分；</p>
<p>绿色括号表示一个运算符，表示红色括号里面的函数要运行；相当于定义完一个匿名函数后就让它直接运行。</p>
</blockquote>
<h3 id="3-使用命名空间"><a href="#3-使用命名空间" class="headerlink" title="3.使用命名空间"></a>3.使用命名空间</h3><p>在我们登录的界面的login.js文件中，我们一般希望我们的每一个js文件里面的代码都放在自己的命名空间里面，这样多个js文件之间就不会有命名冲突了</p>
<p>login.js文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">nameSpace.ns(<span class="string">"BP.login"</span>); //注册命令空间</div><div class="line">BP.login=&#123;</div><div class="line">    min_height:660,//页面最小高度</div><div class="line">    min_widht:1024,//页面最小宽度</div><div class="line">    isIE:<span class="literal">false</span>,</div><div class="line">    init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">       this.isIE=$.browser.msie;</div><div class="line">       this.regEvent();</div><div class="line">       this.initPage();</div><div class="line">       BP.page.i18nInit();//国际化加载</div><div class="line">     &#125;</div><div class="line">     ........</div><div class="line">     .......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用命名空间里面的函数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta name=<span class="string">"others"</span> content=<span class="string">"login_page"</span>&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    $(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        BP.login.init();</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">     &lt;body&gt;  </div><div class="line">     &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>utils.js文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">nameSpace.ns(<span class="string">"BP.utils"</span>);</div><div class="line">BP.utils = &#123;</div><div class="line">    time:3000,</div><div class="line">    timeOut:null,</div><div class="line">    interValForFake:null,</div><div class="line">    isProgressBarShow:<span class="literal">false</span>,</div><div class="line">    timeOutReturn:<span class="string">''</span>,</div><div class="line">    alert:<span class="keyword">function</span>(content)&#123;</div><div class="line">        ....</div><div class="line">    &#125;,</div><div class="line">    .............................</div><div class="line">｝</div></pre></td></tr></table></figure>
<p>反正每一个js文件都有一个自己的命令空间，然后调用的时候带命名空间名字就可以了！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node学习笔记之FS文件模块]]></title>
      <url>http://yoursite.com/2016/07/18/NodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BFS%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>文件系统模块是一个简单包装的标准 POSIX 文件 I/O 操作方法集。可以通过调用 require(“fs”) 来获取该模块。文件系统模块中的所有方法均有异步和同步版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fs = require(<span class="string">"fs"</span>) ;</div></pre></td></tr></table></figure>
<h3 id="我的文件目录"><a href="#我的文件目录" class="headerlink" title="我的文件目录"></a>我的文件目录</h3><p><img src="/img/jietu.png" alt="img"></p>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.readFile(path, <span class="string">"utf8"</span>, <span class="keyword">function</span> (error, data) &#123;</div><div class="line">    <span class="keyword">if</span> (error) throw error;</div><div class="line">    console.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="创建-写入文件"><a href="#创建-写入文件" class="headerlink" title="创建,写入文件"></a>创建,写入文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var txt = <span class="string">"大家要好好学习NodeJS啊！！！"</span>;</div><div class="line">fs.writeFile(path, txt, <span class="keyword">function</span> (err) &#123;</div><div class="line">    <span class="keyword">if</span> (err) throw err;</div><div class="line">    console.log(<span class="string">"File Saved !"</span>); //文件被保存</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="修改文件名称"><a href="#修改文件名称" class="headerlink" title="修改文件名称"></a>修改文件名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.rename(path,<span class="string">'fs-changed.txt'</span>,<span class="keyword">function</span>(err)&#123;</div><div class="line">    console.log(<span class="string">'rename success'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.stat(path,<span class="keyword">function</span>(err,<span class="built_in">stat</span>)&#123;</div><div class="line">    console.log(<span class="built_in">stat</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.exists(path,<span class="keyword">function</span>(exists)&#123;</div><div class="line">    console.log(exists);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.unlink(path,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'success'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Fs与Stream之间的联系"><a href="#Fs与Stream之间的联系" class="headerlink" title="Fs与Stream之间的联系"></a>Fs与Stream之间的联系</h2><p>“Stream” 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 “chunk” 去读取，每读取到一个 “chunk” 我们就将他输出。直到文件读完。这就像 “http1.1” 种支持的 “Transfer-Encoding: chunked” 那样。 (“chunk”可以以任何的形式存在，NodeJS默认是以 “Buffer” 的形式存在，这样更高效)。NodeJS中的”Stream”具备Unix系统上的一个超级特性就是 (“pipe” —— 管道)。</p>
<h3 id="建立“fs-html”"><a href="#建立“fs-html”" class="headerlink" title="建立“fs.html”"></a>建立“fs.html”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">      &lt;head&gt;</div><div class="line">          &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">              div &#123;</div><div class="line">                  　　margin-top: 50px;</div><div class="line">                 　　 width: 100%;</div><div class="line">                    　margin: 0px;</div><div class="line">                  　　height:120px;</div><div class="line">                  　　line-height:120px;</div><div class="line">                     color:<span class="comment">#fff;</span></div><div class="line">                     font-size:22px;</div><div class="line">                     background:<span class="comment">#ff9900;</span></div><div class="line">                  　 text-align: center;</div><div class="line">              &#125;</div><div class="line">          &lt;/style&gt;</div><div class="line">      &lt;/head&gt;</div><div class="line">      &lt;body&gt;</div><div class="line">          &lt;div&gt;Hello,大熊！&lt;/div&gt;</div><div class="line">      &lt;/body&gt;</div><div class="line">  &lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="修改之前的程序如下"><a href="#修改之前的程序如下" class="headerlink" title="修改之前的程序如下"></a>修改之前的程序如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var server=http.createServer(<span class="keyword">function</span>(req,res)&#123;</div><div class="line">    path=<span class="string">'../views/fs.html'</span>;</div><div class="line">    fs.readFile(path,<span class="string">'utf-8'</span>,<span class="keyword">function</span>(err,data)&#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;</div><div class="line">            res.writeHead(500,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">            res.end(<span class="string">'specify file not exists! or server error!'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            res.writeHead(200,&#123;<span class="string">'Content-Typa'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">            res.write(data);</div><div class="line">            res.end();</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line">server.listen(8888);</div><div class="line">console.log(<span class="string">'http server running on port 8888 ...'</span>)</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/img/hello.png" alt="img"></p>
<p>如果我们要发送的不是一个单纯的文本文件而是超媒体文件比如说 Google 2014 IO 大会 的全程高清视频文件。mp4 格式。长度2个多小时1080p。</p>
<p>大概4个多GB。已知 “readFile” 的工作方式是将文件读取到内存。那么这么大一个文件显然是不能这么做的。那该怎么办呢？是之后就需要使用 stream 的来做。那么是这样的。</p>
<h3 id="代码如下像这样"><a href="#代码如下像这样" class="headerlink" title="代码如下像这样"></a>代码如下像这样</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var server=http.createServer(<span class="keyword">function</span>(req,res)&#123;</div><div class="line">    path=<span class="string">'../views/fs.html'</span>;</div><div class="line">    fs.createReadStream(path).pipe(res) ;</div><div class="line">&#125;)</div><div class="line">server.listen(8888);</div><div class="line">console.log(<span class="string">'http server running on port 8888 ...'</span>)</div></pre></td></tr></table></figure>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>这些代码可以实现需要的功能，但是服务在发送文件数据之前需要缓存整个文件数据到内存，如果”fs.html”文件很大并且并发量很大的话，会浪费很多内存。因为用户需要等到整个文件缓存到内存才能接受的文件数据，这样导致用户体验相当不好。不过还好 “(req, res)” 两个参数都是Stream，这样我们可以用fs.createReadStream()代替”fs.readFile()”。</p>
<h2 id="实现简单文件上传的例子："><a href="#实现简单文件上传的例子：" class="headerlink" title="实现简单文件上传的例子："></a>实现简单文件上传的例子：</h2><h3 id="（1），建立“server-js”"><a href="#（1），建立“server-js”" class="headerlink" title="（1），建立“server.js”"></a>（1），建立“server.js”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var http=require(<span class="string">'http'</span>);</div><div class="line">var url=require(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">function</span> start(route,handler)&#123;</div><div class="line">    <span class="keyword">function</span> onRequest(request,response)&#123;</div><div class="line">        var pathname=url.parse(request.url).pathname;</div><div class="line">        //路由到相应的业务逻辑</div><div class="line">        route(pathname,handler,response,request);</div><div class="line">    &#125;</div><div class="line">    http.createServer(onRequest).listen(3000);</div><div class="line">    console.log(<span class="string">'Server is starting'</span>);</div><div class="line">&#125;</div><div class="line">exports.start=start;</div></pre></td></tr></table></figure>
<h3 id="（2），建立“route-js”"><a href="#（2），建立“route-js”" class="headerlink" title="（2），建立“route.js”"></a>（2），建立“route.js”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> route(pathname,handler,response,request)&#123;</div><div class="line">    console.log(<span class="string">'about to route a request for'</span>+pathname);</div><div class="line">    <span class="keyword">if</span>(typeof handler[pathname]===<span class="string">'function'</span>)&#123;</div><div class="line">        <span class="built_in">return</span> handler[pathname](response,request);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        console.log(<span class="string">'no request handler found for'</span>+pathname);</div><div class="line">        response.writeHead(404,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">        response.write(<span class="string">'404 Not Found'</span>);</div><div class="line">        response.end();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">exports.route=route;</div></pre></td></tr></table></figure>
<h3 id="（3），建立“requestHandler-js”"><a href="#（3），建立“requestHandler-js”" class="headerlink" title="（3），建立“requestHandler.js”"></a>（3），建立“requestHandler.js”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var querystring = require(<span class="string">'querystring'</span>),</div><div class="line">    fs = require(<span class="string">'fs'</span>),</div><div class="line">    formidable = require(<span class="string">'formidable'</span>),//npm install formidable</div><div class="line">    util=require(<span class="string">'util'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> start (response, request) &#123;</div><div class="line">    console.log(<span class="string">'start module'</span>);</div><div class="line">    var body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">        <span class="string">'&lt;head&gt;'</span>+</div><div class="line">        <span class="string">'&lt;meta http-equiv="Content-Type" '</span>+</div><div class="line">        <span class="string">'content="text/html; charset=UTF-8" /&gt;'</span>+</div><div class="line">        <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">        <span class="string">'&lt;body&gt;'</span>+</div><div class="line">        <span class="string">'&lt;form action="/upload" enctype="multipart/form-data" method="post"&gt;'</span>+</div><div class="line">        <span class="string">'&lt;input type="file" name="upload" multiple="multiple"&gt;'</span>+</div><div class="line">        <span class="string">'&lt;input type="submit" value="Submit text" /&gt;'</span>+</div><div class="line">        <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">        <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">        <span class="string">'&lt;/html&gt;'</span>;</div><div class="line">    response.writeHead(200, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> upload(response,request)&#123;</div><div class="line">    console.log(<span class="string">'upload module'</span>);</div><div class="line">    var form=new formidable.IncomingForm();</div><div class="line">    form.parse(request,<span class="keyword">function</span>(error,fields,files)&#123;</div><div class="line">        var <span class="built_in">read</span>Stream=fs.createReadStream(files.upload.path);</div><div class="line">        var writeStream=fs.createWriteStream(<span class="string">'../tmp/test.png'</span>);</div><div class="line"></div><div class="line">        //原版作者的是这样写的，但总是报错</div><div class="line">        //fs.renameSync(files.upload.path, <span class="string">'/tmp/test.png'</span>);</div><div class="line">        //baidu之后改成了这样：</div><div class="line">        util.pump(<span class="built_in">read</span>Stream,writeStream,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            fs.unlinkSync(files.upload.path);</div><div class="line">        &#125;);</div><div class="line">        //util.pump又提示我</div><div class="line">        //<span class="string">"(node) util.pump is deprecated. Use readableStream.pipe instead."</span></div><div class="line">        //目前菜鸟，还没搞懂readableStream.pipe肿么用</div><div class="line"></div><div class="line">        response.writeHead(200,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">        response.write(<span class="string">'You\'</span>ve sent:&lt;br/&gt;<span class="string">');</span></div><div class="line">        response.write('&lt;img src=<span class="string">"/show"</span>/&gt;<span class="string">');</span></div><div class="line">        response.end();</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> show(response,request)&#123;</div><div class="line">    console.log(<span class="string">'show,request'</span>);</div><div class="line">    fs.readFile(<span class="string">'../tmp/test.png'</span>,<span class="string">'binary'</span>,<span class="keyword">function</span>(error,file)&#123;//注意路径表写错</div><div class="line">     <span class="keyword">if</span>(error)&#123;</div><div class="line">         response.writeHead(200,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">         response.write(error);</div><div class="line">         response.end();</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">         response.writeHead(200,&#123;<span class="string">'Content-Type'</span>:<span class="string">'image/png'</span>&#125;);</div><div class="line">         response.write(file,<span class="string">'binary'</span>);</div><div class="line">         response.end();</div><div class="line">     &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start=start;</div><div class="line">exports.upload=upload;</div><div class="line">exports.show=show;</div></pre></td></tr></table></figure>
<h3 id="（4），建立“index-js”"><a href="#（4），建立“index-js”" class="headerlink" title="（4），建立“index.js”"></a>（4），建立“index.js”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var server = require(<span class="string">'../server'</span>);</div><div class="line">var router = require(<span class="string">'./route'</span>);</div><div class="line">var requestHandler = require(<span class="string">'./requestHandler'</span>);</div><div class="line">var formidable = require(<span class="string">'formidable'</span>); // require路径搜索算法？？</div><div class="line">var handler = &#123;&#125;;</div><div class="line">handler[<span class="string">'/'</span>] = requestHandler.start;</div><div class="line">handler[<span class="string">'/start'</span>] = requestHandler.start;</div><div class="line">handler[<span class="string">'/upload'</span>] = requestHandler.upload;</div><div class="line">handler[<span class="string">'/show'</span>] = requestHandler.show;</div><div class="line">server.start(router.route, handler);</div></pre></td></tr></table></figure>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><img src="/img/1.png" alt="img"></p>
<p><img src="/img/2.png" alt="img"></p>
<p>感觉好low</p>
<p>本人菜鸟正在学习，还望大神指点</p>
<h3 id="总结一下-1"><a href="#总结一下-1" class="headerlink" title="总结一下"></a>总结一下</h3><p> （1），理解 “Fs与Stream之间的联系” 。<br> （2），熟练使用 “FS” 相关的api。<br> （3），注意细节的把控，比如： 文件操作api同步方式与异步方式之间的处理细节。<br> （4），最后强调：理解文件上传例子中的代码组织方式，不断重构，不断总结。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hello world]]></title>
      <url>http://yoursite.com/2016/07/10/hello-world/</url>
      <content type="html"><![CDATA[<p>高潮时享受成就，低潮时享受人生，有心思时干有意义的活，没心情时做有意思的事。</p>
]]></content>
    </entry>
    
  
  
</search>
